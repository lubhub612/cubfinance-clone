{"version":3,"sources":["hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/BNBHarvestBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/Home/components/EarnAPRCard.tsx","views/Home/components/BridgeCard.tsx","views/Home/components/KingdomCard.tsx","views/Home/Home.tsx","hooks/useI18n.ts","hooks/useContract.ts","hooks/useWeb3.ts","utils/callHelpers.ts","views/Home/components/CardValue.tsx","views/Home/components/CardBusdValue.tsx","components/UnlockButton.tsx","hooks/useTokenBalance.ts","hooks/useHarvest.ts","utils/apr.ts","hooks/useBnbDividends.ts","hooks/useClaim.ts"],"names":["useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWeb3React","fastRefresh","useRefresh","useEffect","nonKingdomFarms","farmsConfig","filter","farm","isKingdom","kingdomFarms","a","calls","map","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","callsK","getKingdomsAddress","kingdomsABI","rawResultsK","resultsK","fetchBalances","useAllEarnings","balances","setBalance","res","resK","fetchAllBalances","Block","styled","div","CakeHarvestBalance","TranslateString","useI18n","earningsSum","reduce","accum","earning","earningNumber","eq","DEFAULT_TOKEN_DECIMAL","toNumber","cakePriceBusd","usePriceCakeBusd","earningsBusd","multipliedBy","CardValue","value","lineHeight","CardBusdValue","color","style","CakeWalletBalance","cakeBalance","useTokenBalance","getCakeAddress","busdBalance","getBalanceNumber","decimals","fontSize","BNBHarvestBalance","bnbDividends","bnbPrice","useBusdPriceFromLpSymbol","bnbRewards","amount","BIG_ZERO","bnbRewardsUSD","StyledFarmStakingCard","Card","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","pendingTxDivs","setPendingTxDivs","balancesWithValue","balanceType","useBnbDividends","onClaim","useClaim","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","size","mb","src","alt","width","height","justifyContent","id","disabled","length","onClick","count","UnlockButton","StyledCakeStats","Row","CakeStats","totalSupply","useTotalSupply","burnedBalance","useBurnedBalance","cubPrice","circSupply","minus","cakeSupply","marketCap","times","prefix","CAKE_PER_BLOCK","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","StyledTwitterCard","TwitterCard","dataSource","sourceType","screenName","options","chrome","mediaQueries","lg","CardMidContent","Heading","attrs","EarnAPRCard","farmsLP","useFarms","data","cakePrice","highestApr","useMemo","aprs","multiplier","lpTotalInQuoteToken","quoteTokenPriceUsd","quoteToken","busdPrice","totalLiquidity","getFarmApr","poolWeight","maxApr","max","toLocaleString","maximumFractionDigits","animation","variant","exact","activeClassName","to","mt","BridgeCard","href","KingdomCard","Hero","Cards","BaseLayout","sm","CTACards","Home","Page","as","FarmStakingCard","translations","useContext","TranslationsContext","translationId","fallback","foundTranslation","find","translation","stringId","text","includesVariable","includes","interpolatedText","isEmpty","Object","keys","forEach","dataKey","templateKey","RegExp","replace","useIfoContract","web3","useWeb3","getIfoContract","useERC20","getBep20Contract","useCake","getCakeContract","useLottery","getLotteryContract","useMasterchef","getMasterchefContract","useKingdom","getKingdomsContract","useBnbDvividendsContract","getBnbDvividendsContract","useSousChef","getSouschefContract","library","refEth","useRef","Web3","getWeb3NoAccount","setweb3","current","approve","lpContract","masterChefContract","methods","ethers","constants","MaxUint256","send","from","stake","deposit","toString","on","tx","transactionHash","sousStake","sousChefContract","BIG_TEN","pow","sousStakeBnb","gas","unstake","withdraw","sousUnstake","emergencyWithdraw","sousEmergencyUnstake","harvest","claim","contract","user","nonce","signature","soushHarvest","soushHarvestBnb","bold","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","props","useAuth","login","logout","onPresentConnectModal","useWalletModal","slowRefresh","setTotalSupply","cakeContract","call","supply","fetchTotalSupply","tokenAddress","balanceOf","fetchBalance","useHarvest","farmPid","dispatch","useAppDispatch","kingdomContract","txHash","fetchFarmUserDataAsync","farms","harvestPromises","Promise","all","getPoolApr","stakingTokenPrice","rewardTokenPrice","totalStaked","tokenPerBlock","totalRewardPricePerYear","BLOCKS_PER_YEAR","totalStakingTokenInPool","apr","isNaN","isFinite","cakePriceUsd","poolLiquidityUsd","farmType","yearlyCakeRewardAllocation","PCSCAKE_PER_YEAR","BAKE_PER_YEAR","BELT_PER_YEAR","liquidity","setBnbDividends","axios","get","timeout","then","result","catch","error","fetchBnbDividends","bnbDividendsContract"],"mappings":"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","file":"static/js/7.d599286f.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress, getKingdomsAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport kingdomsABI from 'config/abi/kingdoms.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const nonKingdomFarms = farmsConfig.filter(farm => !farm.isKingdom)\n    const kingdomFarms = farmsConfig.filter(farm => farm.isKingdom)\n    const fetchBalances = async () => {\n      const calls = nonKingdomFarms.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCub',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = nonKingdomFarms.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      const callsK = kingdomFarms.map((farm) => ({\n        address: getKingdomsAddress(),\n        name: 'pendingCUB',\n        params: [farm.pid, account],\n      }))\n\n      const rawResultsK = await multicall(kingdomsABI, callsK)\n      const resultsK = kingdomFarms.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResultsK[index]) }))\n\n      setFarmsWithBalances([...results, ...resultsK])\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress, getKingdomsAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport kingdomsABI from 'config/abi/kingdoms.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const nonKingdomFarms = farmsConfig.filter(farm => !farm.isKingdom)\n    const kingdomFarms = farmsConfig.filter(farm => farm.isKingdom)\n    const fetchAllBalances = async () => {\n      const calls = nonKingdomFarms.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCub',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      const callsK = kingdomFarms.map((farm) => ({\n        address: getKingdomsAddress(),\n        name: 'pendingCUB',\n        params: [farm.pid, account],\n      }))\n\n      const resK = await multicall(kingdomsABI, callsK)\n\n      setBalance([...res, ...resK])\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport styled from 'styled-components'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst Block = styled.div`\n  margin-bottom: 24px;\n`\n\nconst CakeHarvestBalance = () => {\n  const TranslateString = useI18n()\n  const { account } = useWeb3React()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    const earningNumber = new BigNumber(earning)\n    if (earningNumber.eq(0)) {\n      return accum\n    }\n    return accum + earningNumber.div(DEFAULT_TOKEN_DECIMAL).toNumber()\n  }, 0)\n  const cakePriceBusd = usePriceCakeBusd()\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(cakePriceBusd).toNumber()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <Block>\n      <CardValue value={earningsSum} lineHeight=\"1.5\" />\n      {!cakePriceBusd.eq(0) && <CardBusdValue value={earningsBusd} />}\n    </Block>\n  )\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { BigNumber } from 'bignumber.js'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst CakeWalletBalance = () => {\n  const TranslateString = useI18n()\n  const cakeBalance = useTokenBalance(getCakeAddress())\n  const cakePriceBusd = usePriceCakeBusd()\n  const busdBalance = new BigNumber(getBalanceNumber(cakeBalance)).multipliedBy(cakePriceBusd).toNumber()\n  const { account } = useWeb3React()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '54px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <>\n      <CardValue value={getBalanceNumber(cakeBalance)} decimals={4} fontSize=\"24px\" lineHeight=\"36px\" />\n      {!cakePriceBusd.eq(0) ? <CardBusdValue value={busdBalance} /> : <br />}\n    </>\n  )\n}\n\nexport default CakeWalletBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { BIG_ZERO } from 'utils/bigNumber'\n\nimport { useBusdPriceFromLpSymbol } from 'state/hooks'\nimport styled from 'styled-components'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst Block = styled.div`\n  margin-bottom: 24px;\n`\n\nconst BNBHarvestBalance = ({ bnbDividends }) => {\n  const { account } = useWeb3React()\n  const bnbPrice = useBusdPriceFromLpSymbol('BNB-BUSD LP')\n\n  const bnbRewards = bnbDividends && bnbDividends.amount ? new BigNumber(bnbDividends.amount).div(DEFAULT_TOKEN_DECIMAL) : BIG_ZERO\n  const bnbRewardsUSD = bnbRewards ? bnbRewards.multipliedBy(bnbPrice).toNumber() : 0\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\n        Locked\n      </Text>\n    )\n  }\n\n  return (\n    <Block>\n      <CardValue value={bnbRewards.toNumber()} lineHeight=\"1.5\" />\n      {!bnbPrice.eq(0) && <CardBusdValue value={bnbRewardsUSD} />}\n    </Block>\n  )\n}\n\nexport default BNBHarvestBalance\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button, Flex } from '@pancakeswap-libs/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport useBnbDividends from 'hooks/useBnbDividends'\nimport { useClaim} from 'hooks/useClaim'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport BNBHarvestBalance from './BNBHarvestBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/cub/cub-bg.png');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const [pendingTxDivs, setPendingTxDivs] = useState(false)\n  const { account } = useWeb3React()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 10000)\n\n  const bnbDividends = useBnbDividends()\n  const { onClaim } = useClaim(bnbDividends || {})\n  const bnbRewards = bnbDividends && bnbDividends.amount ? bnbDividends.amount : 0\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => {\n    const { pid, isKingdom } = farmWithBalance\n    return { pid, isKingdom }\n  }))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        <CardImage src=\"/images/cub/token.svg\" alt=\"cub logo\" width={64} height={64} />\n        <Flex justifyContent='space-between'>\n          <div>\n            <Block>\n              <Label>{TranslateString(544, 'CUB to Harvest')}:</Label>\n              <CakeHarvestBalance />\n            </Block>\n            <Block>\n              <Label>{TranslateString(546, 'CUB in Wallet')}:</Label>\n              <CakeWalletBalance />\n            </Block>\n            <Actions>\n              {account ? (\n                <Button\n                  id=\"harvest-all\"\n                  disabled={balancesWithValue.length <= 0 || pendingTx}\n                  onClick={harvestAllFarms}\n                  width=\"100%\"\n                >\n                  {pendingTx\n                    ? TranslateString(548, 'Collecting CUB')\n                    : TranslateString(532, `Harvest all (${balancesWithValue.length})`, {\n                        count: balancesWithValue.length,\n                      })}\n                </Button>\n              ) : (\n                <UnlockButton width=\"100%\" />\n              )}\n            </Actions>\n          </div>\n          <div>\n            <Block>\n              <Label>BNB Dividends <br />for Staking CUB:</Label>\n              <BNBHarvestBalance bnbDividends={bnbDividends} />\n            </Block>\n            <Actions>\n              {account ? (\n                <Button\n                  disabled={bnbRewards === 0 || pendingTxDivs}\n                  onClick={async () => {\n                    setPendingTxDivs(true)\n                    await onClaim()\n                    setPendingTxDivs(false)\n                  }}\n                >\n                  Claim BNB\n                </Button>\n              ) : (\n                <UnlockButton width=\"100%\" />\n              )}\n            </Actions>\n          </div>\n        </Flex>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { CAKE_PER_BLOCK } from 'config'\nimport BigNumber from 'bignumber.js/bignumber'\nimport CardValue from './CardValue'\nimport { usePriceCakeBusd } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const cubPrice = usePriceCakeBusd();\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\n  const cakeSupply = getBalanceNumber(circSupply);\n  const marketCap = cubPrice.times(circSupply);\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(534, 'Cub Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total CUB Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(999, 'Market Cap')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total CUB Burned')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(540, 'New CUB/block')}</Text>\n          <CardValue fontSize=\"14px\" decimals={0} value={CAKE_PER_BLOCK.toNumber()} />\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n// import { useGetStats } from 'hooks/api'\nimport { useTotalValue } from '../../../state/hooks'\nimport CardValue from './CardValue'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n`\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  // const data = useGetStats()\n  // const tvl = data ? data.total_value_locked_all.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\n  const totalValue = useTotalValue();\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading size=\"lg\" mb=\"24px\">\n          {TranslateString(762, 'Total Value Locked (TVL)')}\n        </Heading>\n        {totalValue ? (\n          <>\n            <Heading size=\"xl\">\n              <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2}/>\n            </Heading>\n            <Text color=\"textSubtle\">{TranslateString(764, 'Across all Farms and Dens')}</Text>\n          </>\n        ) : (\n          <Skeleton height={66} />\n        )}\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import React from 'react'\nimport { Card, CardBody, Heading } from '@pancakeswap-libs/uikit'\nimport styled from 'styled-components'\nimport { Timeline } from 'react-twitter-widgets'\nimport useI18n from 'hooks/useI18n'\n\nconst StyledTwitterCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst TwitterCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledTwitterCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(10003, 'Announcements')}\n        </Heading>\n        <Timeline\n          dataSource={{\n            sourceType: 'profile',\n            screenName: 'financeleo'\n          }}\n          options={{\n            height: '300',\n            chrome: \"noheader, nofooter\",\n            width: \"400\"\n          }}\n        />\n      </CardBody>\n    </StyledTwitterCard>\n  )\n}\n\nexport default TwitterCard\n","import React, { useMemo } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap-libs/uikit'\nimport max from 'lodash/max'\nimport { NavLink } from 'react-router-dom'\nimport useI18n from 'hooks/useI18n'\nimport BigNumber from 'bignumber.js'\nimport { getFarmApr } from 'utils/apr'\nimport { useFarms, usePriceCakeBusd } from 'state/hooks'\nimport { getAddress } from 'utils/addressHelpers'\n\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\n  line-height: 44px;\n`\nconst EarnAPRCard = () => {\n  const TranslateString = useI18n()\n  const { data: farmsLP } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n\n  const highestApr = useMemo(() => {\n    const aprs = farmsLP\n      // Filter inactive farms, because their theoretical APR is super high. In practice, it's 0.\n      .filter((farm) => farm.multiplier !== '0X')\n      .map((farm) => {\n        if (farm.lpTotalInQuoteToken) {\n          const quoteTokenPriceUsd = farm.quoteToken.busdPrice\n          const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\n          return getFarmApr(farm.poolWeight, cakePrice, totalLiquidity)\n        }\n        return null\n      })\n\n    const maxApr = max(aprs)\n    return maxApr?.toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }, [cakePrice, farmsLP])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading color=\"contrast\" size=\"lg\">\n          Earn up to\n        </Heading>\n        <CardMidContent color=\"#1993fb\">\n          {highestApr ? (\n            `${highestApr}% ${TranslateString(736, 'APR')}`\n          ) : (\n            <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\n          )}\n        </CardMidContent>\n        <Flex justifyContent=\"space-between\">\n          <Heading color=\"contrast\" size=\"lg\">\n            in Farms\n          </Heading>\n          <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apr-cta\">\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </NavLink>\n        </Flex>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAPRCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Link } from '@pancakeswap-libs/uikit'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background: linear-gradient(#53dee9, #4576d9);\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\n  line-height: 44px;\n`\nconst BridgeCard = () => {\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading color=\"contrast\" size=\"lg\">\n          Instantly Swap\n        </Heading>\n        <CardMidContent color=\"invertedContrast\">ERC20 for BEP20</CardMidContent>\n        <Flex justifyContent=\"space-between\">\n          <Heading color=\"contrast\" size=\"lg\">\n            on LeoBridge\n          </Heading>\n          <Link href=\"https://bridge.cubdefi.com/\">\n            <ArrowForwardIcon mt={30} color=\"contrast\" />\n          </Link>\n        </Flex>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default BridgeCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from '@pancakeswap-libs/uikit'\nimport { NavLink } from 'react-router-dom'\n\nconst StyledFarmStakingCard = styled(Card)`\n  /*background: linear-gradient(#53dee9, #4576d9);*/\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\n  line-height: 44px;\n`\nconst KingdomCard = () => {\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <CardMidContent color=\"primary\">Kingdoms</CardMidContent>\n        <Heading color=\"contrast\" size=\"lg\">\n          CUB&apos;s First Composable Yield Farming Contract\n        </Heading>\n        <Flex justifyContent=\"space-between\">\n          <CardMidContent color=\"primary\">LIVE</CardMidContent>\n          <NavLink exact activeClassName=\"active\" to=\"/kingdoms\">\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </NavLink>\n        </Flex>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default KingdomCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\n// import LotteryCard from 'views/Home/components/LotteryCard'\nimport CakeStats from 'views/Home/components/CakeStats'\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\nimport TwitterCard from 'views/Home/components/TwitterCard'\nimport EarnAPRCard from 'views/Home/components/EarnAPRCard'\nimport BridgeCard from 'views/Home/components/BridgeCard'\nimport KingdomCard from 'views/Home/components/KingdomCard'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/cub/wide.svg');\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/cub/2logos.png') ,url('/images/cub/wide.svg');\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 32px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst CTACards = styled(BaseLayout)`\n  align-items: start;\n  margin-bottom: 32px;\n\n  & > div {\n    grid-column: span 6;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 4;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <Hero>\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\n          {TranslateString(576, 'Cub Finance')}\n        </Heading>\n        <Text>{TranslateString(578, 'Cub Finance on Binance Smart Chain.')}</Text>\n      </Hero>\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <TwitterCard/>\n          {/* <LotteryCard /> */}\n        </Cards>\n        <CTACards>\n          <EarnAPRCard />\n          <BridgeCard />\n          <KingdomCard />\n          {/* <WinCard /> */}\n        </CTACards>\n        <Cards>\n          <CakeStats />\n          <TotalValueLockedCard />\n        </Cards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n","import { useContext } from 'react'\nimport { isEmpty } from 'lodash'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\n\ninterface ContextData {\n  [key: string]: number | string\n}\n\nconst useI18n = () => {\n  const { translations } = useContext(TranslationsContext)\n\n  return (translationId: number, fallback: string, data: ContextData = {}) => {\n    if (translations.length === 0) {\n      return fallback\n    }\n\n    const foundTranslation = translations.find((translation) => {\n      return translation.data.stringId === translationId\n    })\n\n    if (foundTranslation) {\n      const { text } = foundTranslation.data\n      const includesVariable = text.includes('%')\n\n      if (includesVariable) {\n        let interpolatedText = text\n\n        // If dynamic tags are found but no data was passed return the fallback\n        if (isEmpty(data)) {\n          return fallback\n        }\n\n        Object.keys(data).forEach((dataKey) => {\n          const templateKey = new RegExp(`%${dataKey}%`, 'g')\n          interpolatedText = interpolatedText.replace(templateKey, data[dataKey])\n        })\n\n        return interpolatedText\n      }\n\n      return text\n    }\n\n    return fallback\n  }\n}\n\nexport default useI18n\n","import { useMemo } from 'react'\nimport useWeb3 from 'hooks/useWeb3'\nimport {\n  getBep20Contract,\n  getCakeContract,\n  getBunnyFactoryContract,\n  getBunnySpecialContract,\n  getPancakeRabbitContract,\n  getProfileContract,\n  getIfoContract,\n  getIfoV1Contract,\n  getIfoV2Contract,\n  getLotteryContract,\n  getLotteryTicketContract,\n  getMasterchefContract,\n  getKingdomsContract,\n  getBnbDvividendsContract,\n  getPointCenterIfoContract,\n  getSouschefContract,\n  getClaimRefundContract,\n  getTradingCompetitionContract,\n  getEasterNftContract,\n  getErc721Contract,\n  getCakeVaultContract,\n  getPredictionsContract,\n} from 'utils/contractHelpers'\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useIfoContract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIfoContract(address, web3), [address, web3])\n}\n\nexport const useIfoV1Contract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIfoV1Contract(address, web3), [address, web3])\n}\n\nexport const useIfoV2Contract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIfoV2Contract(address, web3), [address, web3])\n}\n\nexport const useERC20 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getBep20Contract(address, web3), [address, web3])\n}\n\n/**\n * @see https://docs.openzeppelin.com/contracts/3.x/api/token/erc721\n */\nexport const useERC721 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getErc721Contract(address, web3), [address, web3])\n}\n\nexport const useCake = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getCakeContract(web3), [web3])\n}\n\nexport const useBunnyFactory = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getBunnyFactoryContract(web3), [web3])\n}\n\nexport const usePancakeRabbits = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPancakeRabbitContract(web3), [web3])\n}\n\nexport const useProfile = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getProfileContract(web3), [web3])\n}\n\nexport const useLottery = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryContract(web3), [web3])\n}\n\nexport const useLotteryTicket = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryTicketContract(web3), [web3])\n}\n\nexport const useMasterchef = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getMasterchefContract(web3), [web3])\n}\n\nexport const useKingdom = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getKingdomsContract(web3), [web3])\n}\n\nexport const useBnbDvividendsContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getBnbDvividendsContract(web3), [web3])\n}\n\nexport const useSousChef = (id) => {\n  const web3 = useWeb3()\n  return useMemo(() => getSouschefContract(id, web3), [id, web3])\n}\n\nexport const usePointCenterIfoContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPointCenterIfoContract(web3), [web3])\n}\n\nexport const useBunnySpecialContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getBunnySpecialContract(web3), [web3])\n}\n\nexport const useClaimRefundContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getClaimRefundContract(web3), [web3])\n}\n\nexport const useTradingCompetitionContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getTradingCompetitionContract(web3), [web3])\n}\n\nexport const useEasterNftContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getEasterNftContract(web3), [web3])\n}\n\nexport const useCakeVaultContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getCakeVaultContract(web3), [web3])\n}\n\nexport const usePredictionsContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPredictionsContract(web3), [web3])\n}\n","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { useWeb3React } from '@web3-react/core'\nimport { getWeb3NoAccount } from 'utils/web3'\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the provider change\n */\nconst useWeb3 = () => {\n  const { library } = useWeb3React()\n  const refEth = useRef(library)\n  const [web3, setweb3] = useState(library ? new Web3(library) : getWeb3NoAccount())\n\n  useEffect(() => {\n    if (library !== refEth.current) {\n      setweb3(library ? new Web3(library) : getWeb3NoAccount())\n      refEth.current = library\n    }\n  }, [library])\n\n  return web3\n}\n\nexport default useWeb3\n","import BigNumber from 'bignumber.js'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { ethers } from 'ethers'\nimport { BIG_TEN, BIG_ZERO } from './bigNumber'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, decimals = 18, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, gas: 200000, value: new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, decimals = 18, account) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0x453a75908fb5a36d482d5f8fe88eca836f32ead5') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmergencyUnstake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account, isKingdom) => {\n  if (isKingdom) {\n    return masterChefContract.methods\n      .withdraw(pid, '0')\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const claim = async (contract, account, user, amount, nonce, signature) => {\n  return contract.methods\n    .claim(user, amount, nonce, signature)\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: BIG_ZERO })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\nexport interface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  lineHeight?: string\n  prefix?: string\n  bold?: boolean\n  color?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({\n  value,\n  decimals,\n  fontSize = '40px',\n  lineHeight = '1',\n  prefix = '',\n  bold = true,\n  color = 'text',\n}) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport CardValue, { CardValueProps } from './CardValue'\n\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\n  return (\n    <CardValue fontSize=\"16px\" lineHeight=\"1.5\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\n  )\n}\n\nexport default CardBusdValue\n","import React from 'react'\nimport { Button, useWalletModal } from '@pancakeswap-libs/uikit'\nimport useAuth from 'hooks/useAuth'\nimport useI18n from 'hooks/useI18n'\n\nconst UnlockButton = (props) => {\n  const TranslateString = useI18n()\n  const { login, logout } = useAuth()\n  const { onPresentConnectModal } = useWalletModal(login, logout)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props}>\n      {TranslateString(292, 'Unlock Wallet')}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const web3 = useWeb3()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf(account).call()\n      setBalance(new BigNumber(res))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, web3, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [web3, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account)\n      setBalance(new BigNumber(walletBalance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, web3, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef, useKingdom } from './useContract'\n\nexport const useHarvest = (farmPid: number, isKingdom?: boolean) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const kingdomContract = useKingdom()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(isKingdom ? kingdomContract : masterChefContract, farmPid, account, isKingdom)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract, kingdomContract, isKingdom])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farms: any[]) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const kingdomContract = useKingdom()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farms.reduce((accum, farm) => {\n      if (farm.isKingdom) return [...accum, harvest(kingdomContract, farm.pid, account, farm.isKingdom)]\n      return [...accum, harvest(masterChefContract, farm.pid, account, farm.isKingdom)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farms, masterChefContract, kingdomContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account, false)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import BigNumber from 'bignumber.js'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, PCSCAKE_PER_YEAR, BAKE_PER_YEAR, BELT_PER_YEAR } from 'config'\n\n/**\n * Get the APR value in %\n * @param stakingTokenPrice Token price in the same quote currency\n * @param rewardTokenPrice Token price in the same quote currency\n * @param totalStaked Total amount of stakingToken in the pool\n * @param tokenPerBlock Amount of new cake allocated to the pool for each new block\n * @returns Null if the APR is NaN or infinite.\n */\nexport const getPoolApr = (\n  stakingTokenPrice: number,\n  rewardTokenPrice: number,\n  totalStaked: number,\n  tokenPerBlock: number,\n): number => {\n  const totalRewardPricePerYear = new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(BLOCKS_PER_YEAR)\n  const totalStakingTokenInPool = new BigNumber(stakingTokenPrice).times(totalStaked)\n  const apr = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100)\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\n}\n\n/**\n * Get farm APR value in %\n * @param poolWeight allocationPoint / totalAllocationPoint\n * @param cakePriceUsd Cake price in USD\n * @param poolLiquidityUsd Total pool liquidity in USD\n * @returns\n */\nexport const getFarmApr = (\n  poolWeight: BigNumber,\n  cakePriceUsd: BigNumber,\n  poolLiquidityUsd: BigNumber,\n  isKingdom?: boolean,\n  farmType?: string\n): number => {\n  if (isKingdom) {\n    let yearlyCakeRewardAllocation = PCSCAKE_PER_YEAR.times(poolWeight)\n    if (farmType === 'Bakery') yearlyCakeRewardAllocation = BAKE_PER_YEAR.times(poolWeight)\n    else if (farmType === 'Belt') yearlyCakeRewardAllocation = BELT_PER_YEAR.times(poolWeight)\n\n    const apr = yearlyCakeRewardAllocation.times(cakePriceUsd).div(poolLiquidityUsd).times(100)\n    return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\n  }\n  const yearlyCakeRewardAllocation = CAKE_PER_BLOCK.times(BLOCKS_PER_YEAR).times(poolWeight)\n  const liquidity = poolLiquidityUsd.toNumber() ? poolLiquidityUsd : new BigNumber(0)\n  const apr = yearlyCakeRewardAllocation.times(cakePriceUsd).div(liquidity).times(100)\n\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\n}\n\nexport default null\n","import { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport axios from 'axios'\nimport useRefresh from './useRefresh'\n\nconst useBnbDividends = () => {\n  const [bnbDividends, setBnbDividends] = useState<any>()\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBnbDividends = async () => {\n      const res = await axios.get(`https://bnb.fbslo.net/?address=${account}`, { timeout: 7000 }).then(result => result.data).catch(() => {\n        return { error: true }\n      })\n\n      setBnbDividends(res)\n    }\n\n    if (account) {\n      fetchBnbDividends()\n    }\n  }, [account, fastRefresh])\n\n  return bnbDividends\n}\n\nexport default useBnbDividends\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { claim } from 'utils/callHelpers'\nimport { useBnbDvividendsContract } from './useContract'\n\nexport const useClaim = (bnbDividends: any) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const bnbDividendsContract = useBnbDvividendsContract()\n  const { user = '', amount = '', nonce = '', signature = '' } = bnbDividends\n\n  const handleClaim = useCallback(async () => {\n    const txHash = await claim(bnbDividendsContract, account, user, amount, nonce, signature)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [dispatch, account, user, amount, nonce, signature, bnbDividendsContract])\n\n  return { onClaim: handleClaim }\n}\n\nexport default useClaim\n"],"sourceRoot":""}