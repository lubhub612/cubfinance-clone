{"version":3,"sources":["views/Airdrop/StakedBalance.tsx","views/Airdrop/Airdrop.tsx","hooks/useTokenBalance.ts"],"names":["Block","styled","div","StakedBalance","cub","value","TranslateString","useI18n","useWeb3React","account","CardValue","toNumber","lineHeight","gt","CardBusdValue","color","style","Title","props","theme","colors","primary","FlexMobile","Flex","Card","card","background","DescriptionCard","TextCard","Header","Text","Wrapper","Airdrops","dispatch","useAppDispatch","fastRefresh","useRefresh","useEffect","fetchFarmUserDataAsync","useTotalCubStaked","BIG_ZERO","totalSupply","useTotalSupply","burnedBalance","useBurnedBalance","getCakeAddress","circSupply","minus","BigNumber","cubSupply","getBalanceNumber","pendingAirdrop","times","pCubValue","PageHeader","className","as","size","mb","Page","flexDirection","alt","src","width","height","href","slowRefresh","useState","setTotalSupply","a","cakeContract","getCakeContract","methods","call","supply","fetchTotalSupply","tokenAddress","balance","setBalance","web3","useWeb3","contract","getBep20Contract","balanceOf","res","fetchBalance","useTokenBalance"],"mappings":"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","file":"static/js/13.e80dc963.chunk.js","sourcesContent":["import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport CardValue from 'views/Home/components/CardValue'\nimport CardBusdValue from 'views/Home/components/CardBusdValue'\n\nconst Block = styled.div`\n  margin-bottom: 24px;\n`\n\nconst StakedBalance = ({ cub, value }) => {\n  const TranslateString = useI18n()\n  const { account } = useWeb3React()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <Block>\n      <CardValue value={cub.toNumber()} lineHeight=\"1.5\" />\n      {value.gt(0) && <CardBusdValue value={value.toNumber()} />}\n    </Block>\n  )\n}\n\nexport default StakedBalance\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\nimport { useAppDispatch } from 'state'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Heading, Text, Flex, Button } from '@pancakeswap-libs/uikit'\nimport styled from 'styled-components'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport Page from 'components/layout/Page'\nimport PageHeader from 'components/PageHeader'\nimport { useTotalCubStaked } from 'state/hooks'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from 'views/Home/components/CardValue'\nimport StakedBalance from './StakedBalance'\n\nconst Title = styled.div`\n  font-size: 2rem;\n  color: ${(props) => props.theme.colors.primary};\n`\n\nconst FlexMobile = styled(Flex)`\n  justify-content: space-between;\n\n  @media only screen and (max-width: 768px) {\n    flex-direction: column;\n    justify-content: felx-start;\n  }\n`\nconst Card = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 8px;\n  box-shadow: 0 3px 4px -3px rgba(0,0,0,0.1),0 4px 6px -2px rgba(0,0,0,0.05);\n  display: flex;\n  /*flex-direction: column;\n  justify-content: space-around;*/\n  padding: 1rem 1rem;\n  position: relative;\n  margin: 1.5rem 1rem;\n`\n\nconst DescriptionCard = styled(Card)`\n  background-image: url(images/cub/polycub/polycub_lion.png);\n  background-position: top left;\n  background-position-y: 0.5rem;\n  background-position-x: 0.5rem;\n  background-repeat: no-repeat;\n  background-size: auto 200px;\n  min-height: 200px;\n  flex-direction: column;\n  justify-content: space-around;\n  // opacity: 0.5;\n`\n\nconst TextCard = styled(Card)`\n  margin-left: 2rem;\n  margin-right: 2rem;\n  opacity: 0.9;\n  border: 1px solid #ddd;\n`\n\nconst Header = styled(Text)`\n  margin-left: 2rem;\n  margin-right: 2rem;\n  font-size: 2rem;\n  font-weight: bold;\n  text-align: center;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n`\n\nconst Airdrops: React.FC = () => {\n  // const { path } = useRouteMatch()\n  // const { pathname } = useLocation()\n  const { account } = useWeb3React()\n\n  const dispatch = useAppDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const { cub = BIG_ZERO, value = BIG_ZERO } = useTotalCubStaked()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\n  const cubSupply = getBalanceNumber(circSupply) || 0;\n  const pendingAirdrop = cubSupply ? new BigNumber(1000000).div(cubSupply).times(cub) : BIG_ZERO\n  const pCubValue = pendingAirdrop.times(1)\n\n  return (\n    <>\n      <PageHeader>\n        <div className='k-header'>\n          <Heading as=\"h1\" size=\"xxl\" color=\"secondary\" mb=\"10px\">\n            POLYCUB Airdrop\n          </Heading>\n        </div>\n      </PageHeader>\n      <Page>\n        <FlexMobile>\n          <Flex flexDirection=\"column\">\n            <Title>Total Staked CUB Balance</Title>\n            <StakedBalance cub={cub} value={value} />\n          </Flex>\n          <Flex flexDirection=\"column\">\n            <Title>Pending Airdrop (60 days)</Title>\n            <StakedBalance cub={pendingAirdrop} value={pCubValue} />\n            {/* <Text bold fontSize=\"40px\" style={{ lineHeight: '1' }} color=\"text\">{pendingAirdrop.toLocaleString('en-US', { maximumFractionDigits: 0 })}</Text> */}\n          </Flex>\n        </FlexMobile>\n        <DescriptionCard>\n          <Header>What is &nbsp;<img alt=\"PolyCUB\" src=\"images/cub/polycub/header_logo_wide.svg\" style={{width: \"auto\", height: \"50px\"}} />?</Header>\n          <TextCard>\n            <Text>PolyCUB (POLYCUB) is the native token for the PolyCUB yield optimizing platform. Users can earn POLYCUB by participating in any of the Kingdom vaults or by staking it into xPOLYCUB to earn the 50% fee penalty generated by other farmers who harvest their yield before the X block locking period.</Text>\n          </TextCard>\n        </DescriptionCard>\n        <DescriptionCard>\n          <Header>How does the airdrop work?</Header>\n          <TextCard>\n            <Text>To particiapte in the airdrop, all you need to do is hodl CUB in either the CUB Kingdom, CUB-BUSD Farm or CUB-BNB farm. A daily snapshot of CUB balances in these 3 locations is taken every day for 60 consecutive days. Each day, POLYCUB tokens are then distributed based on the current balances in each snapshot. This means that if your balance changes (add stake or reduce stake), then your airdrop amount will change from day-to-day. Either increasing if you stake more or decreasing if you stake less.</Text>\n          </TextCard>\n        </DescriptionCard>\n        <Wrapper>\n          <Button size=\"sm\">\n            <a href=\"https://docs.polycub.com/airdrop\">Learn More</a>\n          </Button>\n          <Button size=\"sm\">\n            <a href=\"https://polycub.com/airdrop\">Claim</a>\n          </Button>\n        </Wrapper>\n      </Page>\n    </>\n  )\n}\n\nexport default Airdrops\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const web3 = useWeb3()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf(account).call()\n      setBalance(new BigNumber(res))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, web3, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [web3, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account)\n      setBalance(new BigNumber(walletBalance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, web3, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n"],"sourceRoot":""}