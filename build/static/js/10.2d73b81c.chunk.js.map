{"version":3,"sources":["utils/getDisplayApr.ts","utils/getKingdomAPRAPY.ts","components/Balance.tsx","views/Kingdoms/components/KingdomCard.tsx","views/Kingdoms/components/AprApy.tsx","views/Kingdoms/components/KingdomDetail.tsx","views/Kingdoms/components/DividerBlue.tsx","views/Kingdoms/components/Spacer.tsx","views/Kingdoms/components/Kingdom.tsx","views/Kingdoms/components/CardValue.tsx","views/Kingdoms/hooks/useTotalStaked.ts","views/Kingdoms/components/TotalStaked.tsx","views/Kingdoms/components/FarmTabButtons/index.tsx","views/Kingdoms/Kingdoms.tsx","hooks/useBnbDividends.ts","hooks/useClaim.ts"],"names":["getDisplayApr","cakeRewardsApr","lpRewardsApr","toLocaleString","maximumFractionDigits","getKingdomAPRAPY","farm","realCakePrice","bakePrice","beltPrice","cubDen","apr","cubAPR","isKingdom","poolWeightPCS","compounding","lpTokenBalancePCS","lpTokenBalanceMC","lpTotalInQuoteTokenPCS","quoteTokenPriceUsd","quoteToken","busdPrice","altPid","farmType","beltAPR","totalLiquidity","BigNumber","lpTotalInQuoteToken","times","getFarmApr","poolWeight","tokenPriceVsQuote","dailyAPR","div","toNumber","farmAPY","totalAPY","totalAPYString","hostApr","newMultiplier","multiplier","lpSymbol","getPoolApr","Number","token","getBalanceNumber","DEFAULT_TOKEN_DECIMAL","parseFloat","farmTokenPrice","lpAprs","lpAddresses","toLocaleLowerCase","aprWithLpRewards","Balance","value","fontSize","color","decimals","isDisabled","unit","bold","previousValue","useRef","useEffect","current","start","end","duration","separator","defaultProps","KCard","styled","props","theme","card","background","Button","UiButton","Values","Brackets","span","colors","text","KingdomCard","walletBalance","depositBalance","rewardBalance","walletBalanceQuoteValue","depositBalanceQuoteValue","addLiquidityUrl","account","cakePrice","bnbDividends","location","useLocation","bnbPrice","useBusdPriceFromLpSymbol","useState","requestedApproval","setRequestedApproval","pendingTx","setPendingTx","pendingTxDivs","setPendingTxDivs","pid","isTokenOnly","isKingdomToken","address","tokenName","toUpperCase","userData","allowance","allowanceAsString","tokenBalance","tokenBalanceAsString","stakedBalance","stakedBalanceAsString","earningsBusd","multipliedBy","web3","useWeb3","onStake","useStake","onUnstake","useUnstake","onReward","useHarvest","onClaim","useClaim","isApproved","isGreaterThan","useModal","DepositModal","max","onConfirm","onPresentDeposit","WithdrawModal","onPresentWithdraw","lpAddress","getAddress","tokenAddress","lpContract","useMemo","getBep20Contract","onApprove","useApprove","handleApprove","useCallback","a","console","error","approvedButton","mt","disabled","pathname","includes","onClick","bnbRewards","amount","bnbRewardsUSD","harvestSection","CardBusdValue","className","justifyContent","fullWidth","AprApy","aprApy","lpLabel","farmAPR","toFixed","alignItems","style","display","ApyButton","height","width","Details","Detail","KDetail","StyledLinkExternal","Link","CubKingdom","KingdomDetail","farmName","oneTokenQuoteValue","removed","tokenValueFormated","toString","kingdomContract","replace","liquidityUrlPathParts","getLiquidityUrlPathParts","quoteTokenAddress","process","farmContract","vaultContract","infoAddress","exchangeUrl","PCS_ADD_LIQUIDITY_URL","buyTokenUrl","PCS_EXCHANGE_URL","BAKERY_ADD_LIQUIDITY_URL","BELT_EXCHANGE","displayMultiplier","external","href","symbol","primary","ExpandingWrapper","expanded","K","RainbowLight","keyframes","StyledCardAccent","KImage","Image","KMain","Kingdom","showExpandableSection","setShowExpandableSection","tokenPriceString","farmImage","split","earnings","rawTokenBalance","rawStakedBalance","rawEarningsBalance","tokenPrice","totalValueFormated","undefined","Spacer","role","src","alt","StyledText","Text","CardValue","prefix","useCountUp","countUp","update","updateValue","useTotalStaked","farms","rawTotalCUB","BIG_ZERO","rawTotalStakedUSD","rawTotalAPY","rawTotalDailyAPR","count","forEach","plus","stakedUSD","cubEarned","Wrapper","TotalStaked","totalStakeUSD","totalCub","totalCubUSD","totalDailyAPR","avgAPY","avgDaily","stakedUSDFormatted","dailyFormatted","cubUSDFormatted","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","hasStakeInArchivedFarms","url","useRouteMatch","TranslateString","useI18n","scale","variant","as","to","show","mediaQueries","sm","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","FeeWrapper","Kingdoms","path","totalValue","useTotalValueKingdoms","farmsLP","useFarms","data","query","setQuery","useWeb3React","sortOption","setSortOption","usePriceCakeBusd","useFarmFromPid","useBnbDividends","dispatch","useAppDispatch","fastRefresh","useRefresh","fetchFarmUserDataAsync","isArchived","isInactive","isActive","stakedOnly","setStakedOnly","setLoadArchivedFarmsData","fetchFarmsPublicDataAsync","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","map","liquidity","lowercaseQuery","toLowerCase","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","farmsStakedMemoized","farmsStaked","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","PageHeader","size","mb","textAlign","Page","checked","onChange","length","Select","options","label","option","marginLeft","SearchInput","event","target","id","exact","ref","setBnbDividends","axios","get","timeout","then","result","catch","res","fetchBnbDividends","bnbDividendsContract","useBnbDvividendsContract","user","nonce","signature","claim","txHash"],"mappings":"2YAUeA,EAVO,SAACC,EAAyBC,GAC9C,OAAID,GAAkBC,GACZD,EAAiBC,GAAcC,eAAe,QAAS,CAAEC,sBAAuB,IAEtFH,EACKA,EAAeE,eAAe,QAAS,CAAEC,sBAAuB,IAElE,MC+DMC,EA9DU,SACvBC,EACAC,EACAC,EACAC,EACAC,GACI,IAAD,IAGCC,EAFSC,EAAiMN,EAAtMK,IAAaE,EAAyLP,EAAzLO,UAAWC,EAA8KR,EAA9KQ,cAAeC,EAA+JT,EAA/JS,YAA/C,EAA8MT,EAAlJU,kBAAmBC,OAA/E,MAAkG,EAAlG,IAA8MX,EAAzGY,8BAArG,MAA8H,EAA9H,EAA0JC,EAAoDb,EAA7Ec,WAAcC,UAAiCC,EAA8BhB,EAA9BgB,OAAQC,EAAsBjB,EAAtBiB,SAAUC,EAAYlB,EAAZkB,QAKlM,GAAe,KAAXF,EAAe,CACjB,IAAMG,EAAiB,IAAIC,IAAUhB,EAAOiB,qBAAqBC,MAAMlB,EAAOU,WAAWC,WACzFV,EAAMkB,YAAWnB,EAAOoB,WAAYpB,EAAOqB,kBAAmBN,GAE9D,IAAMO,EAAW,IAAIN,IAAUf,GAAKsB,IAAI,IAAIP,IAAU,MAAMQ,WAEtDC,EAAmE,KAAxD,SAAGxB,EAAM,IAAMI,EAAe,EAAMA,GAAe,GAC9DqB,EAAWD,EACXE,EAAiBD,GAAYA,EAASjC,eAAe,QAAS,CAAEC,sBAAuB,IAI7F,MAFO,CAAEkC,QAAS3B,EAAKqB,WAAUG,UAASC,WAAUC,iBAAgBE,cAAe7B,EAAO8B,YAK5F,GAAsB,SAAlBlC,EAAKmC,SACP9B,EAAM+B,YACJC,OAAOrC,EAAKsC,MAAMvB,WAClBsB,OAAOrC,EAAKsC,MAAMvB,WAClBwB,YAAiB,IAAInB,IAAUT,GAAkBW,MAAMkB,KAAwB,IAC/EC,WAAW,WAER,CACL,IAAMtB,EAAiB,IAAIC,IAAUR,GAAwBU,MAAMT,GAE/D6B,EAAiBzC,EACJ,WAAbgB,EAAuByB,EAAiBxC,EACtB,SAAbe,IAAqByB,EAAiBvC,GAEtBE,EAAR,SAAbY,EAA2BoB,OAAOnB,GAC3BK,YAAW,IAAIH,IAAUZ,GAAgBkC,EAAgBvB,EAAgBZ,EAAWU,GAGjG,IAAMrB,EAAY,UAAG+C,EAAM,UAAC3C,EAAK4C,YAAY,WAAlB,aAAC,EAAwBC,4BAAlC,QAA0D,EACtEC,EAAmBpD,EAAcW,EAAKT,GAE3B,WAAbqB,IAAuBZ,EAAM,IAEjC,IAAMqB,EAAWrB,EAAM,IAAIe,IAAUf,GAAKsB,IAAI,IAAIP,IAAU,MAAMQ,WAAa,IAAIR,IAAU,GAAGQ,WAE5FC,EAAmE,KAAxD,SAAGxB,EAAM,IAAMI,EAAe,EAAMA,GAAe,GACjD,eAAbQ,IAA2BY,EAAwF,KAA7E,SAAGQ,OAAOS,GAAoB,IAAMrC,EAAe,EAAMA,GAAe,IAClH,IAAMqB,EAAWxB,EAASA,EAASuB,EAAUA,EACvCE,EAAiBD,GAAYA,EAASjC,eAAe,QAAS,CAAEC,sBAAuB,IAI7F,MAFO,CAAEkC,QAAS3B,EAAKqB,WAAUG,UAASC,WAAUC,iBAAgBnC,eAAckD,qB,0BChD9EC,EAAkC,SAAC,GAAkE,IAAhEC,EAA+D,EAA/DA,MAAOC,EAAwD,EAAxDA,SAAUC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KACvFC,EAAgBC,iBAAO,GAM7B,OAJAC,qBAAU,WACRF,EAAcG,QAAUV,IACvB,CAACA,IAGF,eAAC,IAAD,CAAMM,KAAMA,EAAMJ,MAAOE,EAAa,eAAiBF,EAAOD,SAAUA,EAAxE,UACE,cAAC,IAAD,CAASU,MAAOJ,EAAcG,QAASE,IAAKZ,EAAOG,SAAUA,EAAUU,SAAU,EAAGC,UAAU,MAC7Fd,GAASK,GAAQ,+BAAOA,QAK/BN,EAAQgB,aAAe,CACrBd,SAAU,OACVG,YAAY,EACZF,MAAO,OACPC,SAAU,GAGGJ,I,2DAAAA,K,iJChBTiB,I,OAAQC,IAAOtC,IAAV,kWAEO,SAACuC,GAAD,OAAWA,EAAMC,MAAMC,KAAKC,eAYxCC,GAASL,YAAOM,IAAPN,CAAH,uFAMNO,GAASP,IAAOtC,IAAV,8CAIN8C,GAAWR,IAAOS,KAAV,2CACH,SAACR,GAAD,OAAWA,EAAMC,MAAMQ,OAAOC,QAwM1BC,GAxLiC,SAAC,GAW1C,IAVL7E,EAUI,EAVJA,KACA8E,EASI,EATJA,cACAC,EAQI,EARJA,eACAC,EAOI,EAPJA,cACAC,EAMI,EANJA,wBACAC,EAKI,EALJA,yBACAC,EAII,EAJJA,gBACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,UACAC,EACI,EADJA,aAEMC,EAAWC,cACXC,EAAWC,YAAyB,eAC1C,EAAkDC,oBAAS,GAA3D,mBAAOC,EAAP,KAA0BC,EAA1B,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA0CJ,oBAAS,GAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,KACQC,EAA2FlG,EAA3FkG,IAAKC,EAAsFnG,EAAtFmG,YAAa5F,EAAyEP,EAAzEO,UAAW6F,EAA8DpG,EAA9DoG,eAAgBjE,EAA8CnC,EAA9CmC,SAAUS,EAAoC5C,EAApC4C,YAAsByD,EAAcrG,EAAvBsC,MAAS+D,QAE/EC,EAAYnE,EAASoE,cAC3B,EAIIvG,EAAKwG,UAAY,GAJrB,IACEC,UAAWC,OADb,MACiC,EADjC,MAEEC,aAAcC,OAFhB,MAEuC,EAFvC,MAGEC,cAAeC,OAHjB,MAGyC,EAHzC,EAKML,EAAY,IAAIrF,IAAUsF,GAC1BC,EAAe,IAAIvF,IAAUwF,GAC7BC,EAAgB,IAAIzF,IAAU0F,GAE9BC,EAAe/B,EAAgB,IAAI5D,IAAU4D,GAAegC,aAAa3B,GAAWzD,WAAa,EAEjGqF,EAAOC,eACLC,EAAYC,aAASlB,EAAK3F,GAA1B4G,QACAE,GAAcC,aAAWpB,EAAK3F,GAA9B8G,UACAE,GAAaC,aAAWtB,EAAK3F,GAA7BgH,SACAE,GAAYC,aAASpC,GAAgB,IAArCmC,QAEFE,GAAavC,GAAWqB,GAAaA,EAAUmB,cAAc,GAEnE,GAA2BC,YACzB,cAACC,GAAA,EAAD,CAAcC,IAAKpB,EAAcqB,UAAWb,EAASb,UAAWA,EAAWnB,gBAAiBA,EAAiBgB,YAAaA,EAAaC,eAAgBA,KADlJ6B,GAAP,qBAGA,GAA4BJ,YAC1B,cAACK,GAAA,EAAD,CAAeH,IAAKlB,EAAemB,UAAWX,GAAWf,UAAWA,EAAWH,YAAaA,EAAaC,eAAgBA,KADpH+B,GAAP,qBAIMC,GAAYC,aAAWzF,GACvB0F,GAAeD,aAAWhC,GAC1BkC,GAAaC,mBAAQ,WACzB,OAAGrC,GAAeC,EACTqC,aAAiBH,GAAcrB,GAEjCwB,aAAiBL,GAAWnB,KAClC,CAACmB,GAAWjC,EAAac,EAAMqB,GAAclC,IAExCsC,GAAcC,aAAWJ,GAAYhI,GAArCmI,UAEFE,GAAgBC,sBAAW,wBAAC,uBAAAC,EAAA,sEAE9BjD,GAAqB,GAFS,SAGxB6C,KAHwB,OAI9B7C,GAAqB,GAJS,gDAM9BkD,QAAQC,MAAR,MAN8B,yDAQ/B,CAACN,KAEEO,GACJ,cAAC3E,GAAD,CACE4E,GAAG,MACHC,SAAUvD,GAAqBL,EAAS6D,SAASC,SAAS,YAC1DC,QAASV,GAHX,8BASIW,GAAajE,GAAgBA,EAAakE,OAAS,IAAIpI,IAAUkE,EAAakE,QAAQ7H,IAAIa,KAAuBZ,WAAa,EAC9H6H,GAAgBF,GAAa,IAAInI,IAAUmI,IAAYvC,aAAavB,GAAU7D,WAAa,EAE7F8H,GAAiB,KAqDrB,OAnDEA,GADoB,QAAlB1J,EAAKmC,SAEL,qCACE,cAAC,IAAD,4BACA,eAACqC,GAAD,WACE,cAAC,GAAD,CACEvB,SAAS,OACTD,MAAOuG,GACPpG,SAAUoG,GAAa,EAAI,EAC3BlG,KAAK,KALT,OAOQ,cAACoB,GAAD,gBAAsB,cAACkF,GAAA,EAAD,CAAe3G,MAAOyG,KAAiB,cAAChF,GAAD,mBAErE,cAACH,GAAD,CACE6E,SAAyB,IAAfI,IAAoBvD,IAAkB2B,GAChD2B,QAAO,wBAAE,uBAAAR,EAAA,6DACP7C,GAAiB,GADV,SAEDwB,KAFC,OAGPxB,GAAiB,GAHV,2CAFX,sBAcF,qCACE,cAAC,IAAD,0BACA,eAACzB,GAAD,WACE,cAAC,GAAD,CACEvB,SAAS,OACTD,MAAOgC,EACP7B,SAAU6B,EAAgB,EAAI,EAC9B3B,KAAK,KALT,OAOQ,cAACoB,GAAD,gBAAsB,cAACkF,GAAA,EAAD,CAAe3G,MAAO+D,IAAgB,cAACtC,GAAD,mBAEpE,cAACH,GAAD,CACE6E,SAA4B,IAAlBnE,GAAuBc,IAAc6B,GAC/C2B,QAAO,wBAAE,uBAAAR,EAAA,6DACP/C,GAAa,GADN,SAEDwB,KAFC,OAGPxB,GAAa,GAHN,2CAFX,wBAeJ,cAAC/B,GAAD,UACE,qBAAK4F,UAAU,SAAf,SACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,MAAf,UACE,cAAC,IAAD,CAAMC,eAAe,gBAArB,SACE,cAAC,IAAD,iCAEF,eAACrF,GAAD,WACE,cAAC,GAAD,CACEvB,SAAS,OACTD,MAAO8B,EACP3B,SAAU2B,EAAgB,EAAI,EAC9BzB,KAAK,KALT,OAOQ,cAACoB,GAAD,gBAAsB,cAACkF,GAAA,EAAD,CAAe3G,MAAOiC,IAA2B,cAACR,GAAD,mBAE7EkD,GACA,cAACrD,GAAD,CAAQ4E,GAAG,MAAMY,WAAS,EAACR,QAASrB,GAApC,qBAEAgB,MAGJ,sBAAKW,UAAU,MAAf,UACE,cAAC,IAAD,CAAMC,eAAe,gBAArB,SACE,cAAC,IAAD,iCAEF,eAACrF,GAAD,WACE,cAAC,GAAD,CACEvB,SAAS,OACTD,MAAO+B,EACP5B,SAAU4B,EAAiB,EAAI,EAC/B1B,KAAK,KALT,OAOQ,cAACoB,GAAD,gBAAsB,cAACkF,GAAA,EAAD,CAAe3G,MAAOkC,IAA4B,cAACT,GAAD,mBAE9EkD,GACA,cAACrD,GAAD,CAAQ4E,GAAG,MAAMY,WAAS,EAACR,QAASnB,GAApC,sBAEAc,MAGJ,qBAAKW,UAAU,MAAf,SACGF,a,UClLEK,GAjDuB,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,OAASC,EAA+B,EAA/BA,QAAS9E,EAAsB,EAAtBA,gBACjD+E,EAAqHF,EAArHE,QAAS7J,EAA4G2J,EAA5G3J,IAAKI,EAAuGuJ,EAAvGvJ,YAAauB,EAA0FgI,EAA1FhI,QAASN,EAAiFsI,EAAjFtI,SAAUG,EAAuEmI,EAAvEnI,QAASE,EAA8DiI,EAA9DjI,eAAgBsD,EAA8C2E,EAA9C3E,UAAWvC,EAAmCkH,EAAnClH,iBAAkBlD,EAAiBoK,EAAjBpK,aAE5G,OACE,qCACE,eAAC,IAAD,CAAMiK,eAAe,gBAArB,UACE,cAAC,IAAD,CAAM3G,MAAM,UAAZ,wBACA,eAAC,IAAD,CAAMI,MAAI,EAACJ,MAAM,UAAjB,UAA4BnB,EAA5B,UAEF,eAAC,IAAD,CAAM8H,eAAe,gBAArB,UACE,cAAC,IAAD,wBACA,cAAC,IAAD,oBAAU,IAAIzI,IAAUY,GAASmI,QAAQ,GAAzC,cAAiD,IAAI/I,IAAUM,GAAUyI,QAAQ,GAAjF,WAEDvK,EACC,eAAC,IAAD,CAAMiK,eAAe,gBAArB,UACE,cAAC,IAAD,8BACA,eAAC,IAAD,WAAO/G,EAAP,UAEA,KACJ,eAAC,IAAD,CAAM+G,eAAe,gBAArB,UACE,cAAC,IAAD,gCACA,eAAC,IAAD,eAAQpJ,QAEV,eAAC,IAAD,CAAMoJ,eAAe,gBAArB,UACE,cAAC,IAAD,wBACA,cAAC,GAAD,CACE5G,SAAS,OACTD,MAAOnB,EACPsB,SAAU,EACVE,KAAK,SAGT,eAAC,IAAD,CAAMwG,eAAe,gBAAgBO,WAAW,SAAhD,UACE,cAAC,IAAD,uBACA,cAAC,IAAD,CAAM9G,MAAI,EAAC+G,MAAO,CAAEC,QAAS,OAAQF,WAAY,UAAjD,SACG/J,EACC,qCACE,cAACkK,GAAA,EAAD,CAAWN,QAASA,EAAS9E,gBAAiBA,EAAiBE,UAAWA,EAAWhF,IAAKA,IACzF6J,GAAW7J,EAAIR,eAAe,QAAS,CAAEC,sBAAuB,IAFnE,OAKA,cAAC,IAAD,CAAU0K,OAAQ,GAAIC,MAAO,cC5CnCC,GAAUzG,IAAOtC,IAAV,uLASPgJ,GAAS1G,IAAOtC,IAAV,qPAgBNiJ,GAAU3G,IAAOtC,IAAV,0JACK,SAACuC,GAAD,OAAWA,EAAMC,MAAMC,KAAKC,cAKxCwG,GAAqB5G,YAAO6G,IAAP7G,CAAH,iDAIlB8G,GAAa9G,IAAOtC,IAAV,kEACL,SAACuC,GAAD,OAAWA,EAAMC,MAAMQ,OAAOC,QA0I1BoG,GAtHqC,SAAC,GAc9C,IAbLhL,EAaI,EAbJA,KACA8E,EAYI,EAZJA,cACAC,EAWI,EAXJA,eACAC,EAUI,EAVJA,cACAC,EASI,EATJA,wBACAC,EAQI,EARJA,yBACA+F,EAOI,EAPJA,SACAC,EAMI,EANJA,mBACAC,EAKI,EALJA,QACAnB,EAII,EAJJA,OACA5E,EAGI,EAHJA,QACAC,EAEI,EAFJA,UACAC,EACI,EADJA,aAEM8F,EAAqBF,GAAwD,QAAlCA,EAAmBG,WAAzC,YAClBH,EAAmB5J,MAAMkB,KAAuB2H,QAAQ,IAC7D,IACIhI,EAA+GnC,EAA/GmC,SAAUD,EAAqGlC,EAArGkC,WAAYpB,EAAyFd,EAAzFc,WAAYwB,EAA6EtC,EAA7EsC,MAAOM,EAAsE5C,EAAtE4C,YAAauD,EAAyDnG,EAAzDmG,YAAaC,EAA4CpG,EAA5CoG,eAAgBkF,EAA4BtL,EAA5BsL,gBAAiBtK,EAAWhB,EAAXgB,OACtGiJ,EAAU9H,GAAYA,EAASoE,cAAcgF,QAAQ,UAAW,IAChEC,EAAwBC,aAAyB,CACrDC,kBAAmB5K,EAAWuF,QAC9BiC,aAAchG,EAAM+D,UAGhB+B,EAAYxF,EAAY+I,IACxBrD,EAAehG,EAAM+D,QAAQsF,IAG7BC,EAAqB,oCADXzF,GAAeC,EAEAkC,EACEF,GAC3ByD,EAAa,sCAAkCP,GACjDQ,EAAW,wCAAoC3F,EAAcmC,EAAeF,GAE5E2D,EAAcC,IACdC,EAAW,UAAMC,IAAN,iBAA+B5J,EAAM+D,QAAQ,KACxDlB,EAAe,UAAM4G,EAAN,YAAqBP,GAClB,WAAlBxL,EAAKiB,UACP8K,EAAcI,IACdhH,EAAe,UAAM4G,EAAN,YAAqBP,GACpCM,EAAW,6CAAyC3F,EAAcmC,EAAeF,IAExD,SAAlBpI,EAAKiB,WAEZkE,EADA4G,EAAcK,IAEdH,EAAcF,EACdD,EAAcC,GAGhB,IAAIM,EAAoBnK,EAIxB,OAHI8H,EAAO/H,gBAAeoK,EAAiB,UAAMrC,EAAO/H,cAAb,MAIzC,eAAC2I,GAAD,WACE,cAAC,GAAD,CACE5K,KAAMA,EACN8E,cAAeA,EACfC,eAAgBA,EAChBC,cAAeA,EACfC,wBAAyBA,EACzBC,yBAA0BA,EAC1BC,gBAAiBA,EACjBC,QAASA,EACTC,UAAWA,EACXC,aAAcA,IAEhB,eAACoF,GAAD,CAASd,UAAU,YAAnB,UACE,eAACe,GAAD,WACE,eAAC,IAAD,CAAMd,eAAe,gBAArB,UACE,eAAC,IAAD,WAAO1H,EAAP,OACA,eAAC,IAAD,eAAQiJ,EAAR,UAEF,eAAC,IAAD,CAAMvB,eAAe,gBAArB,UACE,cAAC,IAAD,0BACA,cAAC,IAAD,UAAOwC,OAET,eAAC,IAAD,CAAMxC,eAAe,gBAArB,UACE,cAAC,IAAD,oBACA,cAAC,IAAD,+BAEU,KAAX7I,EACC,cAAC+J,GAAD,uEAEA,eAAC,IAAD,CAAMlB,eAAe,gBAArB,UACE,cAAC,IAAD,oBACA,cAAC,IAAD,UAAOoB,UAIb,cAACN,GAAD,UACE,cAAC,GAAD,CACEX,OAAQA,EACRC,QAASA,EACT9E,gBAAiBA,MAGrB,eAACwF,GAAD,WACE,cAACE,GAAD,CAAoByB,UAAQ,EAACC,KAAMX,EAAnC,2BACA,cAACf,GAAD,CAAoByB,UAAQ,EAACC,KAAMV,EAAnC,+BACEV,GACA,qCACE,cAACN,GAAD,CAAoByB,UAAQ,EAACC,KAAMN,EAAnC,uBACU3J,EAAMkK,UAEhB,cAAC3B,GAAD,CAAoByB,UAAQ,EAACC,KAAMpH,EAAnC,8BAKJ,cAAC0F,GAAD,CAAoByB,UAAQ,EAACC,KAAMT,EAAnC,sCC/KK7H,OAAOtC,IAAtB,6HACsB,qBAAGwC,MAAkBQ,OAAO8H,WCDnCxI,OAAOtC,IAAtB,kFCWM+K,GAAmBzI,IAAOtC,IAAV,iEACV,SAACuC,GAAD,OAAYA,EAAMyI,SAAW,OAAS,SAI5CC,GAAI3I,IAAOtC,IAAV,gTAES,SAACuC,GAAD,OAAWA,EAAMC,MAAMC,KAAKC,cAUtCwI,GAAeC,YAAH,8KAYZC,GAAmB9I,IAAOtC,IAAV,ynBAgBPkL,IAWTG,GAAS/I,YAAOgJ,IAAPhJ,CAAH,4CAINiJ,GAAQjJ,IAAOtC,IAAV,gDAwIIwL,GAxHyB,SAAC,GAAsG,IAApGnN,EAAmG,EAAnGA,KAAMmL,EAA6F,EAA7FA,QAAS9F,EAAoF,EAApFA,UAAWD,EAAyE,EAAzEA,QAASlF,EAAgE,EAAhEA,UAAWC,EAAqD,EAArDA,UAAWC,EAA0C,EAA1CA,OAAQH,EAAkC,EAAlCA,cAAeqF,EAAmB,EAAnBA,aACzH,EAA0DK,oBAAS,GAAnE,mBAAOyH,EAAP,KAA8BC,EAA9B,KAEQhN,EAAgNL,EAAhNK,IAAKgB,EAA2MrB,EAA3MqB,oBAAqBc,EAAsLnC,EAAtLmC,SAAlC,EAAwNnC,EAA5KU,yBAA5C,MAAgE,EAAhE,IAAwNV,EAArJY,8BAAnE,MAA4F,EAA5F,EAAwHC,EAAgGb,EAAzHc,WAAcC,UAAiCC,EAA0EhB,EAA1EgB,OAAQC,EAAkEjB,EAAlEiB,SAA8BqM,EAAoCtN,EAAxDsC,MAASvB,UAA+BN,EAAgBT,EAAhBS,YAClM8M,EAAYpL,EAASqL,MAAM,KAAK,GAAG3K,oBAErCmH,EAASjK,EAAiBC,EAAMC,EAAeC,EAAWC,EAAWC,GAEzE,EAAwC4J,EAAhCtI,EAAR,EAAQA,SAAUI,EAAlB,EAAkBA,SAAUE,EAA5B,EAA4BA,QAC5B,EAAkDhC,EAAKwG,SAA/CG,EAAR,EAAQA,aAAcE,EAAtB,EAAsBA,cAAe4G,EAArC,EAAqCA,SAE/BC,EAAkB/G,EAAepE,YAAiB,IAAInB,IAAUuF,IAAiB,EACjFgH,EAAmB9G,EAAgBtE,YAAiB,IAAInB,IAAUyF,IAAkB,EACpF+G,EAAqBH,EAAWlL,YAAiB,IAAInB,IAAUqM,IAAa,EAC5EI,EAAa,IAAIzM,IAAUkM,GAC7BpC,EAAqB,IAAI9J,IAAU,GAIlC8J,EAFAlL,EAAKoG,eAEkC,SAAlBpG,EAAKiB,SAAsB4M,EAAWlM,IAAIa,KAAyB,IAAIpB,IAAUpB,EAAKsC,MAAMvB,WAAWY,IAAIa,KAD9G5B,EAAyB,IAAIQ,IAAUR,GAAwBe,IAAI,IAAIP,IAAUV,IAAoBY,MAAMT,GAAoBc,IAAIa,KAAyB,IAAIpB,IAAU,GAGjM,IAAM6D,EAA0B0B,EAAe,IAAIvF,IAAUuF,GAAcrF,MAAM4J,GAAoBtJ,WAAa,EAE5GsD,EAA2B2B,EAAgB,IAAIzF,IAAUyF,GAAevF,MAAM4J,GAAoBtJ,WAAa,EAE/GkM,EAAqBzM,EAAmB,WACtCgB,OAAO,IAAIjB,IAAUC,GAAqBC,MAAMT,IAAqBhB,oBAAekO,EAAW,CAAEjO,sBAAuB,KAC5H,IACEoK,EAAU7J,GAAOA,EAAIR,eAAe,QAAS,CAAEC,sBAAuB,IAI5E,OAFAkK,EAAM,2BAAQA,GAAR,IAAgBvJ,cAAayJ,UAAS7J,IAAgB,KAAXW,EAAgBgB,EAAU3B,EAAKgF,YAAWxE,mBAAoBwB,OAAOxB,GAAqBQ,wBAGzI,qCACE,cAAC2M,GAAD,IACA,eAACpB,GAAD,WACyB,QAAtB5M,EAAKsC,MAAMkK,QAAoB,cAACO,GAAD,IAChC,eAACG,GAAD,CAAOe,KAAK,eAAerE,UAAU,mBAAmBN,QAAS,kBAAM+D,GAA0BD,IAAjG,UAEE,qBAAKxD,UAAU,MAAf,SAAqB,cAACoD,GAAD,CAAQkB,IAAG,wBAAmBX,EAAnB,QAAoCY,IAAKhM,EAAUsI,MAAO,GAAID,OAAQ,OACtG,sBAAKZ,UAAU,MAAf,UACE,cAAC,IAAD,CAAMC,eAAe,aAAaO,WAAW,SAA7C,SACE,cAAC,IAAD,CAAMR,UAAU,QAAhB,SAAyBzH,MAE3B,eAAC,IAAD,oBAAalB,KACb,eAAC,IAAD,kBAAW6M,QAEb,sBAAKlE,UAAU,MAAf,UACE,cAAC,GAAD,CACE3G,SAAS,OACTD,MAAO0K,EACPvK,SAAUuK,EAAkB,EAAI,EAChCrK,KAAK,GACLH,MAAOwK,EAAkB,UAAY,SAEvC,cAAC,IAAD,yBAEF,sBAAK9D,UAAU,MAAf,UACE,cAAC,GAAD,CACE3G,SAAS,OACTD,MAAO2K,EACPxK,SAAUwK,EAAmB,EAAI,EACjCtK,KAAK,GACLH,MAAOyK,EAAmB,UAAY,SAExC,cAAC,IAAD,2BAEF,sBAAK/D,UAAU,MAAf,UACE,cAAC,GAAD,CACE3G,SAAS,OACTD,MAAO4K,EACPzK,SAAUyK,EAAqB,EAAI,EACnCvK,KAAK,GACLH,MAAO0K,EAAqB,UAAY,SAE1C,cAAC,IAAD,yBAEF,sBAAKhE,UAAU,MAAf,UACE,cAAC,GAAD,CACE3G,SAAS,OACTD,MAA+B,QAAxBlB,EAASuJ,WAAuBvJ,EAAW,EAClDqB,SAAU,EACVE,KAAK,IACLH,MAAM,YAER,cAAC,IAAD,CAAMA,MAAM,UAAZ,oBAEF,sBAAK0G,UAAU,MAAf,UACE,cAAC,GAAD,CACE3G,SAAS,OACTD,MAAOtB,EACPyB,SAAU,EACVE,KAAK,MAEP,cAAC,IAAD,0BAGJ,eAACqJ,GAAD,CAAkBC,SAAUS,EAA5B,UACE,cAAC,GAAD,IACA,cAAC,GAAD,CACEpN,KAAMA,EACN8E,cAAe4I,EACf3I,eAAgB4I,EAChB3I,cAAe4I,EACf3I,wBAAyBA,EACzBC,yBAA0BA,EAC1B+F,SAAUhK,EACViK,mBAAoBA,EACpBC,QAASA,EACTnB,OAAQA,EACR5E,QAASA,EACTC,UAAWA,EACXC,aAAcA,cC7LpB8I,GAAanK,YAAOoK,IAAPpK,CAAH,mDA6BDqK,GAxB6B,SAAC,GAAqD,IAAnDtL,EAAkD,EAAlDA,MAAOG,EAA2C,EAA3CA,SAAUoL,EAAiC,EAAjCA,OAAiC,IAAzBtL,gBAAyB,MAAd,OAAc,EAC/F,EAA4BuL,qBAAW,CACrC7K,MAAO,EACPC,IAAKZ,EACLa,SAAU,EACVC,UAAW,IACXX,cAEe4K,IAAb5K,EAAyBA,EAAWH,EAAQ,EAAI,EAAIA,EAAQ,IAAM,EAAI,IAPlEyL,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,OAUXC,EAAcnL,iBAAOkL,GAM3B,OAJAjL,qBAAU,WACRkL,EAAYjL,QAAQV,KACnB,CAACA,EAAO2L,IAGT,eAACP,GAAD,CAAYnL,SAAUA,EAAtB,UACGsL,EAAQE,M,SCgBAG,GA5CQ,SAACC,EAAYxJ,EAAsBnF,EAAsBC,EAAsBC,GACpG,IAAI0O,EAAcC,KACdC,EAAoBD,KACpBE,EAAc,EACdC,EAAmB,EACnBC,EAAQ,EACZN,EAAMO,SAAQ,SAACpP,GACb,GAAIA,EAAKO,UAAW,CAClB,IAAQiG,EAAgJxG,EAAhJwG,SAAR,EAAwJxG,EAAtIY,8BAAlB,MAA2C,EAA3C,IAAwJZ,EAA1GU,yBAA9C,MAAkE,EAAlE,EAA8FG,EAA0Db,EAAnFc,WAAcC,UAAqD8M,EAAgB7N,EAApCsC,MAASvB,UACrH8F,EAA4BL,EAA5BK,cAAe4G,EAAajH,EAAbiH,SAGjBzD,EAASjK,EAAiBC,EAAMqF,EAAWnF,EAAWC,EAAWC,GAEvE,GAAIyG,EAAgB,IAAK,CACvB,IAAIqE,EAAqB6D,KAIpB7D,EAFAlL,EAAKoG,eAEkC,SAAlBpG,EAAKiB,SAAsB4M,EAAa,IAAIzM,IAAUpB,EAAKsC,MAAMvB,WADpEH,EAAyB,IAAIQ,IAAUR,GAAwBe,IAAI,IAAIP,IAAUV,IAAoBY,MAAMT,GAAsB,IAAIO,IAAU,GAGtK,IAAM8D,EAA2B2B,EAAgB,IAAIzF,IAAUyF,GAAevF,MAAM4J,GAAsB,IAAI9J,IAAU,GAExH4N,EAAoBA,EAAkBK,KAAK,IAAIjO,IAAU8D,IAEzD+J,GAAeA,IAAejF,EAAOlI,SACrCoN,GAAoBA,IAAoBlF,EAAOtI,SAE/CyN,GAAS,EAGM,MAAb1B,IAAkBqB,EAAcA,EAAYO,KAAK,IAAIjO,IAAUqM,SAIvE,IAAM6B,EAAYN,IAAsBD,KAAWxM,YAAiByM,GAAqB,EAEnFO,EAAYT,IAAgBC,KAAWxM,YAAiBuM,GAAe,EAI7E,MAAO,CAACQ,EAAWC,EAFHA,EAAY,IAAInO,IAAUmO,GAAWvI,aAAa3B,GAAWzD,WAAa,EAEnDqN,EAAaC,EAAkBC,IC1ClEK,GAAUvL,IAAOtC,IAAV,oEA6DE8N,GAhDiC,SAAC,GAAwD,IAAtDZ,EAAqD,EAArDA,MAAOxJ,EAA8C,EAA9CA,UAAWnF,EAAmC,EAAnCA,UAAWC,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,OACzF,EAA+EwO,GAAeC,EAAOxJ,EAAWnF,EAAWC,EAAWC,GAAtI,mBAAOsP,EAAP,KAAsBC,EAAtB,KAAgCC,EAAhC,KAA6C9N,EAA7C,KAAuD+N,EAAvD,KAAsEV,EAAtE,KAEMW,EAAiC,QAAxBhO,EAASuJ,YAAqC,IAAbvJ,EAAiBA,EAAWqN,EAAQ,EAC9EY,EAAWF,EAAgBA,EAAgBV,EAAQ,EAEnDa,EAAqBN,EAAa,WAAQA,EAAc7P,eAAe,QAAS,CAAEC,sBAAuB,KAC3G,OACEmQ,EAAiBF,EAAQ,UAAOA,EAASlQ,eAAe,QAAS,CAAEC,sBAAuB,IAAjE,KACzB,OACAoQ,EAAkBN,EAAW,WAAQA,EAAY/P,eAAe,QAAS,CAAEC,sBAAuB,KAChG,OAER,OACE,cAAC0P,GAAD,UACE,eAAC,IAAD,CAAM3F,eAAe,gBAAgBO,WAAW,aAAhD,UACE,gCACE,cAAC,IAAD,4BACA,cAAC,IAAD,CAAMnH,SAAS,OAAOC,MAAM,aAA5B,SAA0C8M,IAC1C,eAAC,IAAD,WAAOb,EAAP,gBAEF,gCACE,cAAC,IAAD,0BACA,cAAC,GAAD,CACElM,SAAS,OACTD,MAAO8M,EACP3M,SAAU2M,EAAS,EAAI,EACvBzM,KAAK,IACLH,MAAM,eAER,eAAC,IAAD,oBAAa+M,QAEf,gCACE,cAAC,IAAD,0BACA,cAAC,GAAD,CACEhN,SAAS,OACTD,MAAO2M,EACPxM,SAAUwM,EAAW,EAAI,EACzBtM,KAAK,GACLH,MAAM,eAER,cAAC,IAAD,UAAOgN,a,oBCRFC,GA1CuC,SAAC,GAA0D,IAK3GC,EALmDC,EAAuD,EAAvDA,wBAAyBC,EAA8B,EAA9BA,wBACxEC,EAAQC,cAARD,IACFhL,EAAWC,cACXiL,EAAkBC,eAGxB,OAAQnL,EAAS6D,UACf,IAAK,YACHgH,EAAc,EACd,MACF,IAAK,oBACHA,EAAc,EACd,MACF,IAAK,qBACHA,EAAc,EACd,MACF,QACEA,EAAc,EAIlB,OACE,cAAC,GAAD,UACE,eAAC,IAAD,CAAYA,YAAaA,EAAaO,MAAM,KAAKC,QAAQ,SAAzD,UACE,cAAC,IAAD,CAAgBC,GAAI/F,KAAMgG,GAAE,UAAKP,GAAjC,SACGE,EAAgB,KAAM,UAEzB,cAAC,IAAD,CAAiBM,KAAMV,EAAvB,SACE,cAAC,IAAD,CAAgBQ,GAAI/F,KAAMgG,GAAE,UAAKP,EAAL,YAA5B,SACGE,EAAgB,IAAK,gBAG1B,cAAC,IAAD,CAAiBM,KAAMT,EAAvB,SACE,cAAC,IAAD,CAAgBO,GAAI/F,KAAMgG,GAAE,UAAKP,EAAL,aAA5B,SACGE,EAAgB,IAAK,0BAU5BjB,GAAUvL,IAAOtC,IAAV,6MAUT,qBAAGwC,MAAkB6M,aAAaC,MChChCC,I,OAAmBjN,IAAOtC,IAAV,uTAUlB,qBAAGwC,MAAkB6M,aAAaC,OAQhCE,GAAgBlN,IAAOtC,IAAV,oIAKf0M,KAKE+C,GAAenN,IAAOtC,IAAV,mEACZ0M,KAKAgD,GAAkBpN,IAAOtC,IAAV,gKAMjB,qBAAGwC,MAAkB6M,aAAaC,MAMhCK,GAAerN,IAAOtC,IAAV,kLAKd,qBAAGwC,MAAkB6M,aAAaC,MAUhCM,GAAatN,IAAOtC,IAAV,mDA0TD6P,GApTY,WACzB,IAAQC,EAASjB,cAATiB,KACFC,EAAaC,cACXvI,EAAa5D,cAAb4D,SACMwI,EAAYC,cAAlBC,KACR,EAA0BnM,mBAAS,IAAnC,mBAAOoM,EAAP,KAAcC,EAAd,KACQ5M,EAAY6M,cAAZ7M,QACR,EAAoCO,mBAAS,OAA7C,mBAAOuM,EAAP,KAAmBC,EAAnB,KACM9M,EAAY+M,cACZnS,EAAgByF,YAAyB,SAAW,IAAItE,IAAU,GAClElB,EAAYwF,YAAyB,eACrCvF,EAAYuF,YAAyB,eACrCtF,EAASiS,YAAe,IAExB/M,EAAegN,eAAqB,GAEpCC,EAAWC,cACTC,EAAgBC,cAAhBD,YACRhP,qBAAU,WACJ2B,GACFmN,EAASI,YAAuBvN,MAEjC,CAACA,EAASmN,EAAUE,IAEvB,IAAMG,EAAaxJ,EAASC,SAAS,YAC/BwJ,EAAazJ,EAASC,SAAS,WAC/ByJ,GAAYD,IAAeD,EAMjC,EAAoCjN,oBAAUmN,GAA9C,mBAAOC,EAAP,KAAmBC,EAAnB,KACAvP,qBAAU,WACRuP,GAAeF,KACd,CAACA,IAEJrP,qBAAU,WAER8O,EAASU,YAAyBL,IAI9BA,IACFL,EAASW,eACL9N,GACFmN,EAASI,YAAuBvN,OAGnC,CAACwN,EAAYL,EAAUnN,IAE1B,IAAM+N,EAAcvB,EAAQwB,QAAO,SAAApT,GACjC,OAAOA,EAAKO,YAAc,CAAC,KAAM,QAAQ8I,SAASrJ,EAAKkC,cAAgBmR,YAAcrT,EAAKkG,QAGtFoN,EAAgB1B,EAAQwB,QAAO,SAAApT,GACnC,OAAOA,EAAKO,WAAa,CAAC,KAAM,QAAQ8I,SAASrJ,EAAKkC,cAAgBmR,YAAcrT,EAAKkG,QAGrFqN,EAAgB3B,EAAQwB,QAAO,SAACpT,GAAD,OAAUqT,YAAcrT,EAAKkG,QAE5DsN,EAAkBL,EAAYC,QAClC,SAACpT,GAAD,OAAUA,EAAKwG,UAAY,IAAIpF,IAAUpB,EAAKwG,SAASK,eAAee,cAAc,MAGhF6L,EAAsBH,EAAcF,QACxC,SAACpT,GAAD,OAAUA,EAAKwG,UAAY,IAAIpF,IAAUpB,EAAKwG,SAASK,eAAee,cAAc,MAGhF8L,GAAsBH,EAAcH,QACxC,SAACpT,GAAD,OAAUA,EAAKwG,UAAY,IAAIpF,IAAUpB,EAAKwG,SAASK,eAAee,cAAc,MAGhF+L,GAAY9K,uBAChB,SAAC+K,GACC,IAAIC,EAA+CD,EAAeE,KAAI,SAAC9T,GACrE,IAAKA,EAAKqB,oBACR,OAAOrB,EAGT,IAAMa,EAAqBb,EAAKc,WAAWC,UACrCI,EAAiB,IAAIC,IAAUpB,EAAKqB,qBAAqBC,MAAMT,GAC/DR,EAAMyS,EAAWvR,YAAWvB,EAAKwB,WAAY6D,EAAWlE,GAAkB,EAEhF,OAAO,2BAAKnB,GAAZ,IAAkBK,MAAK0T,UAAW5S,OAGpC,GAAI4Q,EAAO,CACT,IAAMiC,EAAiBjC,EAAMkC,cAC7BJ,EAAwBA,EAAsBT,QAAO,SAACpT,GACpD,OAAOA,EAAKmC,SAAS8R,cAAc5K,SAAS2K,MAGhD,OAAOH,IAET,CAACxO,EAAW0M,EAAOe,IAOfoB,GAAc1Q,iBAAuB,MAE3C,GAAwDmC,mBA1G1B,IA0G9B,qBAAOwO,GAAP,MAA6BC,GAA7B,MACA,GAA0CzO,oBAAS,GAAnD,qBAAO0O,GAAP,MAAsBC,GAAtB,MAEMC,GAAsB/L,mBAAQ,WAClC,IAAIgM,EAAc,GA+BlB,OAVI1B,IACF0B,EAA2Bb,GAAbZ,EAAuBS,EAA6BL,IAEhEN,IACF2B,EAA2Bb,GAAbZ,EAAuBU,EAAiCH,IAEpEV,IACF4B,EAA2Bb,GAAbZ,EAAuBW,GAAiCH,IA1BtD,SAAC1E,GACjB,OAAQqD,GACN,IAAK,MACH,OAAOuC,kBAAQ5F,GAAO,SAAC7O,GAAD,OAA+BA,EAAKK,MAAK,QACjE,IAAK,aACH,OAAOoU,kBACL5F,GACA,SAAC7O,GAAD,OAAgCA,EAAKkC,WAAaG,OAAOrC,EAAKkC,WAAWwS,MAAM,GAAI,IAAM,IACzF,QAEJ,IAAK,SACH,OAAOD,kBAAQ5F,GAAO,SAAC7O,GAAD,OAAgCA,EAAKwG,SAAWxG,EAAKwG,SAASiH,SAAW,IAAI,QACrG,IAAK,YACH,OAAOgH,kBAAQ5F,GAAO,SAAC7O,GAAD,OAA+BqC,OAAOrC,EAAK+T,aAAY,QAC/E,QACE,OAAOlF,GAcN8F,CAAUH,GAAaE,MAAM,EAAGP,MACtC,CACDjC,EACAiB,EACAQ,GACAb,EACAC,EACAS,EACAW,GACAtB,EACAY,EACAH,EACAV,EACAc,GACAH,IAGF9P,qBAAU,WAQH4Q,KACsB,IAAIO,sBART,SAACC,GACrB,YAAgBA,EAAhB,MACUC,gBACRV,IAAwB,SAACW,GAAD,OAA2BA,EAlK3B,QAuKuC,CAC/DC,WAAY,MACZC,UAAW,IAEIC,QAAQhB,GAAYxQ,SACrC4Q,IAAiB,MAElB,CAACC,GAAqBF,KA4BzB,OACE,qCACE,eAACc,EAAA,EAAD,WACE,sBAAKvL,UAAU,WAAf,UACE,cAAC,IAAD,CAASiH,GAAG,KAAKuE,KAAK,MAAMlS,MAAM,YAAYmS,GAAG,OAAjD,sBAGA,eAAC,IAAD,WACE,cAAC,IAAD,CAAM/R,MAAI,EAACL,SAAS,OAApB,qBAGA,cAAC,GAAD,CAAWA,SAAS,OAAOD,MAAO0O,EAAW9P,WAAY2M,OAAO,IAAIpL,SAAU,UAGlF,cAAC,IAAD,CAAS0N,GAAG,KAAKuE,KAAK,KAAKlS,MAAM,UAAUmS,GAAG,OAAOhL,MAAO,CAAEiL,UAAW,QAAzE,yCAGA,cAAC,IAAD,CAASzE,GAAG,KAAK3N,MAAM,YAAYmS,GAAG,OAAOhL,MAAO,CAAEiL,UAAW,QAAjE,sEAGA,cAAC,IAAD,CAASzE,GAAG,KAAK3N,MAAM,UAAUmS,GAAG,OAAOhL,MAAO,CAAEiL,UAAW,QAA/D,gGAGA,cAAC,IAAD,CAASzE,GAAG,KAAK3N,MAAM,UAAUmS,GAAG,OAAOhL,MAAO,CAAEiL,UAAW,QAA/D,oMAGA,eAAC/D,GAAD,WACE,cAAC,IAAD,CAASV,GAAG,KAAK3N,MAAM,YAAYmS,GAAG,MAAMhL,MAAO,CAAEiL,UAAW,QAAhE,kBAGA,eAAC,IAAD,CAAMzL,eAAe,gBAArB,UACE,cAAC,IAAD,yDACA,cAAC,IAAD,oBAEF,eAAC,IAAD,CAAMA,eAAe,gBAArB,UACE,cAAC,IAAD,8BACA,cAAC,IAAD,oBAEF,eAAC,IAAD,CAAMA,eAAe,gBAArB,UACE,cAAC,IAAD,6BACA,cAAC,IAAD,mDAEF,eAAC,IAAD,CAAMA,eAAe,gBAArB,UACE,cAAC,IAAD,8BACA,cAAC,IAAD,4BAIN,eAAC0L,EAAA,EAAD,CAAM3L,UAAU,cAAhB,UACE,cAAC,GAAD,CAAaiF,MAAO0F,GAAqBlP,UAAWA,EAAWnF,UAAWA,EAAWC,UAAWA,EAAWC,OAAQA,IACnH,eAAC8Q,GAAD,WACE,eAACI,GAAD,WACE,eAACH,GAAD,WACE,cAAC,IAAD,CAAQqE,QAASzC,EAAY0C,SAAU,kBAAMzC,GAAeD,IAAapC,MAAM,OAC/E,cAAC,IAAD,6BAEF,cAAC,GAAD,CACEN,wBAAyBoD,EAAoBiC,OAAS,EACtDpF,wBAAyBoD,GAAoBgC,OAAS,OAG1D,eAACrE,GAAD,WACE,eAACD,GAAD,WACE,cAAC,IAAD,sBACA,cAACuE,EAAA,EAAD,CACEC,QAAS,CACP,CACEC,MAAO,UACP7S,MAAO,WAET,CACE6S,MAAO,MACP7S,MAAO,OAET,CACE6S,MAAO,aACP7S,MAAO,cAET,CACE6S,MAAO,SACP7S,MAAO,UAET,CACE6S,MAAO,YACP7S,MAAO,cAGXyS,SA3FiB,SAACK,GAC9B3D,EAAc2D,EAAO9S,aA6Fb,eAACoO,GAAD,CAAc/G,MAAO,CAAE0L,WAAY,IAAnC,UACE,cAAC,IAAD,qBACA,cAACC,EAAA,EAAD,CAAaP,SAlMC,SAACQ,GACzBjE,EAASiE,EAAMC,OAAOlT,mBAqMlB,qBAAKmT,GAAG,WAAR,SAxHF,gCACI,cAAC,IAAD,CAAOC,OAAK,EAAC3E,KAAI,UAAKA,GAAtB,SACG8C,GAAoBT,KAAI,SAAC9T,GAAD,OACvB,cAAC,GAAD,CAAwBA,KAAMA,EAAMqF,UAAWA,EAAWD,QAASA,EAAS+F,SAAS,EAAOjL,UAAWA,EAAWC,UAAWA,EAAWC,OAAQA,EAAQH,cAAeA,EAAeqF,aAAcA,GAAtLtF,EAAKkG,UAGvB,cAAC,IAAD,CAAOkQ,OAAK,EAAC3E,KAAI,UAAKA,EAAL,YAAjB,SACG8C,GAAoBT,KAAI,SAAC9T,GAAD,OACvB,cAAC,GAAD,CAAwBA,KAAMA,EAAMqF,UAAWA,EAAWD,QAASA,EAAS+F,SAAO,EAACjL,UAAWA,EAAWC,UAAWA,EAAWC,OAAQA,EAAQH,cAAeA,EAAeqF,aAAcA,GAA9KtF,EAAKkG,UAGvB,cAAC,IAAD,CAAOkQ,OAAK,EAAC3E,KAAI,UAAKA,EAAL,aAAjB,SACG8C,GAAoBT,KAAI,SAAC9T,GAAD,OACvB,cAAC,GAAD,CAAwBA,KAAMA,EAAMqF,UAAWA,EAAWD,QAASA,EAAS+F,SAAO,EAACjL,UAAWA,EAAWC,UAAWA,EAAWC,OAAQA,EAAQH,cAAeA,EAAeqF,aAAcA,GAA9KtF,EAAKkG,eAiHzB,qBAAKmQ,IAAKnC,a,8GCvXH5B,IAtBS,WACtB,MAAwC3M,qBAAxC,mBAAOL,EAAP,KAAqBgR,EAArB,KACQlR,EAAY6M,cAAZ7M,QACAqN,EAAgBC,cAAhBD,YAgBR,OAdAhP,qBAAU,WASJ2B,GARmB,uCAAG,4BAAA0D,EAAA,sEACNyN,IAAMC,IAAN,yCAA4CpR,GAAW,CAAEqR,QAAS,MAAQC,MAAK,SAAAC,GAAM,OAAIA,EAAO7E,QAAM8E,OAAM,WAC5H,MAAO,CAAE5N,OAAO,MAFM,OAClB6N,EADkB,OAKxBP,EAAgBO,GALQ,2CAAH,oDASrBC,KAED,CAAC1R,EAASqN,IAENnN,I,gJCjBIoC,EAAW,SAACpC,GACvB,IAAMiN,EAAWC,cACTpN,EAAY6M,cAAZ7M,QACF2R,EAAuBC,cAC7B,EAA+D1R,EAAvD2R,YAAR,MAAe,GAAf,IAA+D3R,EAA5CkE,cAAnB,MAA4B,GAA5B,IAA+DlE,EAA/B4R,aAAhC,MAAwC,GAAxC,IAA+D5R,EAAnB6R,iBAA5C,MAAwD,GAAxD,EAQA,MAAO,CAAE1P,QANWoB,sBAAW,sBAAC,4BAAAC,EAAA,sEACTsO,YAAML,EAAsB3R,EAAS6R,EAAMzN,EAAQ0N,EAAOC,GADjD,cACxBE,EADwB,OAE9B9E,EAASI,YAAuBvN,IAFF,kBAGvBiS,GAHuB,2CAI7B,CAAC9E,EAAUnN,EAAS6R,EAAMzN,EAAQ0N,EAAOC,EAAWJ,O","file":"static/js/10.2d73b81c.chunk.js","sourcesContent":["const getDisplayApr = (cakeRewardsApr?: number, lpRewardsApr?: number) => {\n  if (cakeRewardsApr && lpRewardsApr) {\n    return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  if (cakeRewardsApr) {\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  return null\n}\n\nexport default getDisplayApr\n","import { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { getPoolApr, getFarmApr } from 'utils/apr'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport BigNumber from 'bignumber.js'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport lpAprs from 'config/constants/lpAprs.json'\nimport getDisplayApr from 'utils/getDisplayApr'\n\nconst getKingdomAPRAPY = (\n  farm: FarmWithStakedValue,\n  realCakePrice: BigNumber,\n  bakePrice: BigNumber,\n  beltPrice: BigNumber,\n  cubDen: any,\n) => {\n  const { apr: cubAPR, isKingdom, poolWeightPCS, compounding, lpTokenBalancePCS: lpTokenBalanceMC = 0, lpTotalInQuoteTokenPCS = 0, quoteToken: { busdPrice: quoteTokenPriceUsd }, altPid, farmType, beltAPR } = farm\n\n  let apr:number\n  let data = null\n\n  if (altPid === 12) {\n    const totalLiquidity = new BigNumber(cubDen.lpTotalInQuoteToken).times(cubDen.quoteToken.busdPrice)\n    apr = getFarmApr(cubDen.poolWeight, cubDen.tokenPriceVsQuote, totalLiquidity)\n\n    const dailyAPR = new BigNumber(apr).div(new BigNumber(365)).toNumber()\n\n    const farmAPY = ((((apr / 100 / compounding) + 1) ** compounding) - 1) * 100\n    const totalAPY = farmAPY\n    const totalAPYString = totalAPY && totalAPY.toLocaleString('en-US', { maximumFractionDigits: 2 })\n\n    data = { hostApr: apr, dailyAPR, farmAPY, totalAPY, totalAPYString, newMultiplier: cubDen.multiplier }\n\n    return data\n  }\n\n  if (farm.lpSymbol === 'CAKE') {\n    apr = getPoolApr(\n      Number(farm.token.busdPrice),\n      Number(farm.token.busdPrice),\n      getBalanceNumber(new BigNumber(lpTokenBalanceMC).times(DEFAULT_TOKEN_DECIMAL), 18),\n      parseFloat('10') // CAKE is 10\n    )\n  } else {\n    const totalLiquidity = new BigNumber(lpTotalInQuoteTokenPCS).times(quoteTokenPriceUsd)\n\n    let farmTokenPrice = realCakePrice\n    if (farmType === 'Bakery') farmTokenPrice = bakePrice\n    else if (farmType === 'Belt') farmTokenPrice = beltPrice\n\n    if (farmType === 'Belt') apr = Number(beltAPR)\n    else apr = getFarmApr(new BigNumber(poolWeightPCS), farmTokenPrice, totalLiquidity, isKingdom, farmType)\n  }\n\n  const lpRewardsApr = lpAprs[farm.lpAddresses['56']?.toLocaleLowerCase()] ?? 0\n  const aprWithLpRewards = getDisplayApr(apr, lpRewardsApr)\n\n  if (farmType === 'Bakery') apr = 10\n\n  const dailyAPR = apr ? new BigNumber(apr).div(new BigNumber(365)).toNumber() : new BigNumber(0).toNumber()\n\n  let farmAPY = ((((apr / 100 / compounding) + 1) ** compounding) - 1) * 100\n  if (farmType === 'Pancake v2') farmAPY = ((((Number(aprWithLpRewards) / 100 / compounding) + 1) ** compounding) - 1) * 100\n  const totalAPY = cubAPR ? cubAPR + farmAPY : farmAPY\n  const totalAPYString = totalAPY && totalAPY.toLocaleString('en-US', { maximumFractionDigits: 2 })\n\n  data = { hostApr: apr, dailyAPR, farmAPY, totalAPY, totalAPYString, lpRewardsApr, aprWithLpRewards }\n\n  return data\n}\n\nexport default getKingdomAPRAPY\n","import React, { useEffect, useRef } from 'react'\nimport CountUp from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\ninterface TextProps {\n  isDisabled?: boolean\n  fontSize?: string\n  color?: string\n  bold?: boolean\n}\n\ninterface BalanceProps extends TextProps {\n  value?: number\n  decimals?: number\n  unit?: string\n}\n\nconst Balance: React.FC<BalanceProps> = ({ value, fontSize, color, decimals, isDisabled, unit, bold }) => {\n  const previousValue = useRef(0)\n\n  useEffect(() => {\n    previousValue.current = value\n  }, [value])\n\n  return (\n    <Text bold={bold} color={isDisabled ? 'textDisabled' : color} fontSize={fontSize}>\n      <CountUp start={previousValue.current} end={value} decimals={decimals} duration={1} separator=\",\" />\n      {value && unit && <span>{unit}</span>}\n    </Text>\n  )\n}\n\nBalance.defaultProps = {\n  fontSize: '32px',\n  isDisabled: false,\n  color: 'text',\n  decimals: 3,\n}\n\nexport default Balance\n","import React, { useState, useCallback, useMemo } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { useBusdPriceFromLpSymbol } from 'state/hooks'\nimport { Flex, Text, Button as UiButton, useModal } from '@pancakeswap-libs/uikit'\nimport Balance from 'components/Balance'\nimport CardBusdValue from 'views/Home/components/CardBusdValue'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport DepositModal from 'views/Farms/components/DepositModal'\nimport WithdrawModal from 'views/Farms/components/WithdrawModal'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { useApprove } from 'hooks/useApprove'\nimport { useClaim} from 'hooks/useClaim'\nimport { getBep20Contract } from 'utils/contractHelpers'\nimport { getAddress } from 'utils/addressHelpers'\nimport useWeb3 from 'hooks/useWeb3'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\n\nimport './KingdomCard.css'\n\nconst KCard = styled.div`\n  align-self: baseline;\n  /*background: ${(props) => props.theme.card.background};\n  border-radius: 8px;\n  box-shadow: 0 3px 4px -3px rgba(0,0,0,0.1),0 4px 6px -2px rgba(0,0,0,0.05);*/\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  /*padding: 6px 12px;*/\n  position: relative;\n  margin-top: 0.5rem;\n  margin-bottom: 1rem;\n`\n\nconst Button = styled(UiButton)`\n  height: 40px;\n  margin-top: 0.3rem;\n  display: block;\n`\n\nconst Values = styled.div`\n  display: flex;\n`\n\nconst Brackets = styled.span`\n  color: ${(props) => props.theme.colors.text};\n`\n\ninterface KingdomCardProps {\n  farm?: FarmWithStakedValue\n  walletBalance: number\n  depositBalance: number\n  rewardBalance: number\n  walletBalanceQuoteValue: number\n  depositBalanceQuoteValue: number\n  addLiquidityUrl: string\n  account?: string\n  cakePrice?: BigNumber\n  bnbDividends?: any\n}\n\nconst KingdomCard: React.FC<KingdomCardProps> = ({\n  farm,\n  walletBalance,\n  depositBalance,\n  rewardBalance,\n  walletBalanceQuoteValue,\n  depositBalanceQuoteValue ,\n  addLiquidityUrl,\n  account,\n  cakePrice,\n  bnbDividends,\n}) => {\n  const location = useLocation()\n  const bnbPrice = useBusdPriceFromLpSymbol('BNB-BUSD LP')\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const [pendingTx, setPendingTx] = useState(false)\n  const [pendingTxDivs, setPendingTxDivs] = useState(false)\n  const { pid, isTokenOnly, isKingdom, isKingdomToken, lpSymbol, lpAddresses, token: { address } } = farm\n\n  const tokenName = lpSymbol.toUpperCase()\n  const {\n    allowance: allowanceAsString = 0,\n    tokenBalance: tokenBalanceAsString = 0,\n    stakedBalance: stakedBalanceAsString = 0,\n  } = farm.userData || {}\n  const allowance = new BigNumber(allowanceAsString)\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\n  // const cakePrice = usePriceCakeBusd()\n  const earningsBusd = rewardBalance ? new BigNumber(rewardBalance).multipliedBy(cakePrice).toNumber() : 0\n\n  const web3 = useWeb3()\n  const { onStake } = useStake(pid, isKingdom)\n  const { onUnstake } = useUnstake(pid, isKingdom)\n  const { onReward } = useHarvest(pid, isKingdom)\n  const { onClaim } = useClaim(bnbDividends || {})\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} isTokenOnly={isTokenOnly} isKingdomToken={isKingdomToken} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} isTokenOnly={isTokenOnly} isKingdomToken={isKingdomToken} />,\n  )\n\n  const lpAddress = getAddress(lpAddresses)\n  const tokenAddress = getAddress(address)\n  const lpContract = useMemo(() => {\n    if(isTokenOnly || isKingdomToken){\n      return getBep20Contract(tokenAddress, web3)\n    }\n    return getBep20Contract(lpAddress, web3)\n  }, [lpAddress, isTokenOnly, web3, tokenAddress, isKingdomToken])\n\n  const { onApprove } = useApprove(lpContract, isKingdom)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const approvedButton = (\n    <Button\n      mt=\"8px\"\n      disabled={requestedApproval || location.pathname.includes('archived')}\n      onClick={handleApprove}\n    >\n      Approve Contract\n    </Button>\n  )\n\n  const bnbRewards = bnbDividends && bnbDividends.amount ? new BigNumber(bnbDividends.amount).div(DEFAULT_TOKEN_DECIMAL).toNumber() : 0\n  const bnbRewardsUSD = bnbRewards ? new BigNumber(bnbRewards).multipliedBy(bnbPrice).toNumber() : 0\n\n  let harvestSection = null\n  if (farm.lpSymbol === 'CUB') {\n    harvestSection = (\n      <>\n        <Text>BNB Dividends</Text>\n        <Values>\n          <Balance\n            fontSize=\"16px\"\n            value={bnbRewards}\n            decimals={bnbRewards ? 3 : 2}\n            unit=\"\"\n          />\n          &nbsp;<Brackets>(</Brackets><CardBusdValue value={bnbRewardsUSD} /><Brackets>)</Brackets>\n        </Values>\n        <Button\n          disabled={bnbRewards === 0 || pendingTxDivs || !isApproved}\n          onClick={async () => {\n            setPendingTxDivs(true)\n            await onClaim()\n            setPendingTxDivs(false)\n          }}\n        >\n          Claim\n        </Button>\n      </>\n    )\n  } else {\n    harvestSection = (\n      <>\n        <Text>CUB Rewards</Text>\n        <Values>\n          <Balance\n            fontSize=\"16px\"\n            value={rewardBalance}\n            decimals={rewardBalance ? 3 : 2}\n            unit=\"\"\n          />\n          &nbsp;<Brackets>(</Brackets><CardBusdValue value={earningsBusd} /><Brackets>)</Brackets>\n        </Values>\n        <Button\n          disabled={rewardBalance === 0 || pendingTx || !isApproved}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n        >\n          Harvest\n        </Button>\n      </>\n    )\n  }\n\n  return (\n    <KCard>\n      <div className=\"k-card\">\n        <div className=\"flex-grid\">\n          <div className=\"col\">\n            <Flex justifyContent='space-between'>\n              <Text>Balance (Wallet)</Text>\n            </Flex>\n            <Values>\n              <Balance\n                fontSize=\"16px\"\n                value={walletBalance}\n                decimals={walletBalance ? 3 : 2}\n                unit=\"\"\n              />\n              &nbsp;<Brackets>(</Brackets><CardBusdValue value={walletBalanceQuoteValue} /><Brackets>)</Brackets>\n            </Values>\n            { isApproved ? (\n              <Button mt=\"8px\" fullWidth onClick={onPresentDeposit}>Deposit</Button>\n            ) : (\n              approvedButton\n            )}\n          </div>\n          <div className=\"col\">\n            <Flex justifyContent='space-between'>\n              <Text>Deposit (Staked)</Text>\n            </Flex>\n            <Values>\n              <Balance\n                fontSize=\"16px\"\n                value={depositBalance}\n                decimals={depositBalance ? 3 : 2}\n                unit=\"\"\n              />\n              &nbsp;<Brackets>(</Brackets><CardBusdValue value={depositBalanceQuoteValue} /><Brackets>)</Brackets>\n            </Values>\n            { isApproved ? (\n              <Button mt=\"8px\" fullWidth onClick={onPresentWithdraw}>Withdraw</Button>\n            ) : (\n              approvedButton\n            )}\n          </div>\n          <div className=\"col\">\n            {harvestSection}\n          </div>\n        </div>\n      </div>\n    </KCard>\n  )\n}\n\nexport default KingdomCard\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Text, Flex, Skeleton } from '@pancakeswap-libs/uikit'\nimport Balance from 'components/Balance'\n\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\n\nexport interface AprApyProps {\n  aprApy: any\n  lpLabel: string\n  addLiquidityUrl: string\n}\n\nconst AprApy: React.FC<AprApyProps> = ({ aprApy,  lpLabel, addLiquidityUrl }) => {\n  const { farmAPR, apr, compounding, hostApr, dailyAPR, farmAPY, totalAPYString, cakePrice, aprWithLpRewards, lpRewardsApr } = aprApy\n\n  return (\n    <>\n      <Flex justifyContent=\"space-between\">\n        <Text color=\"warning\">Total APY:</Text>\n        <Text bold color=\"warning\">{totalAPYString}%</Text>\n      </Flex>\n      <Flex justifyContent=\"space-between\">\n        <Text>Farm APR:</Text>\n        <Text>{`${new BigNumber(hostApr).toFixed(2)}% (${new BigNumber(dailyAPR).toFixed(3)}%)`}</Text>\n      </Flex>\n      {lpRewardsApr ? (\n        <Flex justifyContent=\"space-between\">\n          <Text>APR+LP rewards:</Text>\n          <Text>{aprWithLpRewards}%</Text>\n        </Flex>\n      ) : null}\n      <Flex justifyContent=\"space-between\">\n        <Text>Compounds / year:</Text>\n        <Text>~{compounding}</Text>\n      </Flex>\n      <Flex justifyContent=\"space-between\">\n        <Text>Farm APY:</Text>\n        <Balance\n          fontSize=\"16px\"\n          value={farmAPY}\n          decimals={2}\n          unit=\"%\"\n        />\n      </Flex>\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\n        <Text>CUB APR:</Text>\n        <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n          {apr ? (\n            <>\n              <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apr={apr} />\n              {farmAPR || apr.toLocaleString('en-US', { maximumFractionDigits: 2 })}%\n            </>\n          ) : (\n            <Skeleton height={24} width={80} />\n          )}\n        </Text>\n      </Flex>\n    </>\n  )\n}\n\nexport default AprApy\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Link, Flex, Text } from '@pancakeswap-libs/uikit'\nimport { DEFAULT_TOKEN_DECIMAL, BAKERY_ADD_LIQUIDITY_URL, PCS_ADD_LIQUIDITY_URL, PCS_EXCHANGE_URL, BELT_EXCHANGE } from 'config'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport KingdomCard from './KingdomCard'\nimport AprApy from './AprApy'\n\nconst Details = styled.div`\n  margin-top: 1rem;\n  display: flex;\n  justify-content: space-between;\n  /*padding-left: 0.8rem;\n  padding-right: 0.8rem;*/\n  /*font-size: 0.95rem*/\n`\n\nconst Detail = styled.div`\n  /*display: inline;\n  margin-right: 1rem;*/\n  /*& div {\n    font-family: Arial;\n    font-size: 0.8rem;\n    padding: 2px;\n  }*/\n  &:nth-child(1) {\n    width: 25%\n  }\n  &:nth-child(2) {\n    width: 33%\n  }\n`\n\nconst KDetail = styled.div`\n  /*background: ${(props) => props.theme.card.background};\n  border-radius: 8px;\n  box-shadow: 0 3px 4px -3px rgba(0,0,0,0.1),0 4px 6px -2px rgba(0,0,0,0.05);*/\n`\n\nconst StyledLinkExternal = styled(Link)`\n  font-weight: 400;\n`\n\nconst CubKingdom = styled.div`\n  color: ${(props) => props.theme.colors.text};\n  margin-top: 0.2rem;\n`\n\ninterface KingdomDetailProps {\n  farm: FarmWithStakedValue\n  walletBalance: number\n  depositBalance: number\n  rewardBalance: number\n  walletBalanceQuoteValue: number\n  depositBalanceQuoteValue: number\n  farmName: string\n  oneTokenQuoteValue: BigNumber\n  removed?: boolean\n  aprApy?: any\n  account?: string\n  cakePrice?: BigNumber\n  bnbDividends?: any\n}\n\nconst KingdomDetail: React.FC<KingdomDetailProps> = ({\n  farm,\n  walletBalance,\n  depositBalance,\n  rewardBalance,\n  walletBalanceQuoteValue,\n  depositBalanceQuoteValue,\n  farmName,\n  oneTokenQuoteValue,\n  removed,\n  aprApy,\n  account,\n  cakePrice,\n  bnbDividends,\n}) => {\n  const tokenValueFormated = oneTokenQuoteValue && oneTokenQuoteValue.toString() !== 'NaN'\n    ? `~$${oneTokenQuoteValue.times(DEFAULT_TOKEN_DECIMAL).toFixed(2)}`\n    : '-'\n  const { lpSymbol, multiplier, quoteToken, token, lpAddresses, isTokenOnly, isKingdomToken, kingdomContract, altPid } = farm\n  const lpLabel = lpSymbol && lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const tokenAddress = token.address[process.env.REACT_APP_CHAIN_ID]\n\n  const isToken = isTokenOnly || isKingdomToken\n  const farmContract= isToken ?\n    `https://bscscan.com/token/${tokenAddress}`\n    : `https://bscscan.com/token/${lpAddress}`\n  const vaultContract = `https://bscscan.com/address/${kingdomContract}`\n  let infoAddress = `https://pancakeswap.info/pair/${isTokenOnly ? tokenAddress : lpAddress}`\n\n  let exchangeUrl = PCS_ADD_LIQUIDITY_URL\n  let buyTokenUrl = `${PCS_EXCHANGE_URL}/swap/${token.address['56']}`\n  let addLiquidityUrl = `${exchangeUrl}/${liquidityUrlPathParts}`\n  if (farm.farmType === 'Bakery') {\n    exchangeUrl = BAKERY_ADD_LIQUIDITY_URL\n    addLiquidityUrl = `${exchangeUrl}/${liquidityUrlPathParts}`\n    infoAddress = `https://info.bakeryswap.org/#/pair/${isTokenOnly ? tokenAddress : lpAddress}`\n  }\n  else if (farm.farmType === 'Belt') {\n    exchangeUrl = BELT_EXCHANGE\n    addLiquidityUrl = exchangeUrl\n    buyTokenUrl = exchangeUrl\n    infoAddress = exchangeUrl\n  }\n\n  let displayMultiplier = multiplier\n  if (aprApy.newMultiplier) displayMultiplier = `${aprApy.newMultiplier}*`\n  // else if (multiplier) displayMultiplier = `${multiplier.substr(0,4)}X`\n\n  return (\n    <KDetail>\n      <KingdomCard\n        farm={farm}\n        walletBalance={walletBalance}\n        depositBalance={depositBalance}\n        rewardBalance={rewardBalance}\n        walletBalanceQuoteValue={walletBalanceQuoteValue}\n        depositBalanceQuoteValue={depositBalanceQuoteValue}\n        addLiquidityUrl={addLiquidityUrl}\n        account={account}\n        cakePrice={cakePrice}\n        bnbDividends={bnbDividends}\n      />\n      <Details className=\"k-details\">\n        <Detail>\n          <Flex justifyContent=\"space-between\">\n            <Text>{lpSymbol}:</Text>\n            <Text>({tokenValueFormated})</Text>\n          </Flex>\n          <Flex justifyContent=\"space-between\">\n            <Text>Multiplier:</Text>\n            <Text>{displayMultiplier}</Text>\n          </Flex>\n          <Flex justifyContent=\"space-between\">\n            <Text>Type:</Text>\n            <Text>Auto-compound</Text>\n          </Flex>\n          {altPid === 12 ? (\n            <CubKingdom>*CUB Kingdom multiplier coexists with CUB Den multiplier</CubKingdom>\n          ) : (\n            <Flex justifyContent=\"space-between\">\n              <Text>Farm:</Text>\n              <Text>{farmName}</Text>\n            </Flex>\n          )}\n        </Detail>\n        <Detail>\n          <AprApy\n            aprApy={aprApy}\n            lpLabel={lpLabel}\n            addLiquidityUrl={addLiquidityUrl}\n          />\n        </Detail>\n        <Detail>\n          <StyledLinkExternal external href={farmContract}>Farm Contract</StyledLinkExternal>\n          <StyledLinkExternal external href={vaultContract}>Kingdom Contract</StyledLinkExternal>\n          {!removed && (\n            <>\n              <StyledLinkExternal external href={buyTokenUrl}>\n                {`Buy ${token.symbol}`}\n              </StyledLinkExternal>\n              <StyledLinkExternal external href={addLiquidityUrl}>\n                Add Liquidity\n              </StyledLinkExternal>\n            </>\n          )}\n          <StyledLinkExternal external href={infoAddress}>See Token Info</StyledLinkExternal>\n        </Detail>\n      </Details>\n    </KDetail>\n  )\n}\n\nexport default KingdomDetail\n","import styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.primary};\n  opacity: 0.2;\n  height: 1px;\n  margin: 12px auto;\n  width: 100%;\n`\n","import styled from 'styled-components'\n\nexport default styled.div`\n  height: 1px;\n  margin: 12px auto;\n  width: 100%;\n`\n","import React, { useState } from 'react'\nimport { Text, Image, Flex } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport getKingdomAPRAPY from 'utils/getKingdomAPRAPY'\nimport Balance from 'components/Balance'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport KingdomDetail from './KingdomDetail'\nimport Divider from './DividerBlue'\nimport Spacer from './Spacer'\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\nconst K = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 8px;\n  box-shadow: 0 3px 4px -3px rgba(0,0,0,0.1),0 4px 6px -2px rgba(0,0,0,0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 0.4rem 0.8rem;\n  position: relative;\n`\n\nconst RainbowLight = keyframes`\n\t0% {\n\t\tbackground-position: 0% 50%;\n\t}\n\t50% {\n\t\tbackground-position: 100% 50%;\n\t}\n\t100% {\n\t\tbackground-position: 0% 50%;\n\t}\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(\n    45deg,\n    rgba(255, 0, 0, 1) 0%,\n    rgba(255, 154, 0, 1) 10%,\n    rgba(208, 222, 33, 1) 20%,\n    rgba(79, 220, 74, 1) 30%,\n    rgba(63, 218, 216, 1) 40%,\n    rgba(47, 201, 226, 1) 50%,\n    rgba(28, 127, 238, 1) 60%,\n    rgba(95, 21, 242, 1) 70%,\n    rgba(186, 12, 248, 1) 80%,\n    rgba(251, 7, 217, 1) 90%,\n    rgba(255, 0, 0, 1) 100%\n  );\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 8px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst KImage = styled(Image)`\n  width: 64px;\n`\n\nconst KMain = styled.div`\n  cursor: pointer;\n`\n\ninterface KingdomProps {\n  farm: FarmWithStakedValue\n  removed?: boolean\n  cakePrice?: BigNumber\n  account?: string\n  bakePrice?: BigNumber\n  beltPrice?: BigNumber\n  cubDen?: any\n  realCakePrice?: BigNumber\n  bnbDividends?: any\n}\n\nconst Kingdom: React.FC<KingdomProps> = ({ farm, removed, cakePrice, account, bakePrice, beltPrice, cubDen, realCakePrice, bnbDividends }) => {\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  const { apr, lpTotalInQuoteToken, lpSymbol, lpTokenBalancePCS = 0, lpTotalInQuoteTokenPCS = 0, quoteToken: { busdPrice: quoteTokenPriceUsd }, altPid, farmType, token: { busdPrice: tokenPriceString }, compounding } = farm\n  const farmImage = lpSymbol.split(' ')[0].toLocaleLowerCase()\n\n  let aprApy = getKingdomAPRAPY(farm, realCakePrice, bakePrice, beltPrice, cubDen)\n\n  const { dailyAPR, totalAPY, hostApr } = aprApy\n  const { tokenBalance, stakedBalance, earnings } = farm.userData\n\n  const rawTokenBalance = tokenBalance ? getBalanceNumber(new BigNumber(tokenBalance)) : 0\n  const rawStakedBalance = stakedBalance ? getBalanceNumber(new BigNumber(stakedBalance)) : 0\n  const rawEarningsBalance = earnings ? getBalanceNumber(new BigNumber(earnings)) : 0\n  const tokenPrice = new BigNumber(tokenPriceString);\n  let oneTokenQuoteValue = new BigNumber(0)\n\n  if (!farm.isKingdomToken)\n    oneTokenQuoteValue = lpTotalInQuoteTokenPCS ? new BigNumber(lpTotalInQuoteTokenPCS).div(new BigNumber(lpTokenBalancePCS)).times(quoteTokenPriceUsd).div(DEFAULT_TOKEN_DECIMAL) : new BigNumber(0)\n  else oneTokenQuoteValue = farm.farmType !== 'Belt' ? tokenPrice.div(DEFAULT_TOKEN_DECIMAL) : new BigNumber(farm.token.busdPrice).div(DEFAULT_TOKEN_DECIMAL)\n\n  const walletBalanceQuoteValue = tokenBalance ? new BigNumber(tokenBalance).times(oneTokenQuoteValue).toNumber() : 0\n\n  const depositBalanceQuoteValue = stakedBalance ? new BigNumber(stakedBalance).times(oneTokenQuoteValue).toNumber() : 0\n\n  const totalValueFormated = lpTotalInQuoteToken\n    ? `$${Number(new BigNumber(lpTotalInQuoteToken).times(quoteTokenPriceUsd)).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n  const farmAPR = apr && apr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n\n  aprApy = { ...aprApy, compounding, farmAPR, apr: altPid === 12 ? hostApr : apr, cakePrice, quoteTokenPriceUsd: Number(quoteTokenPriceUsd), lpTotalInQuoteToken }\n\n  return (\n    <>\n      <Spacer />\n      <K>\n        {farm.token.symbol === 'CUB' && <StyledCardAccent />}\n        <KMain role=\"presentation\" className=\"flex-grid k-grid\" onClick={() => setShowExpandableSection(!showExpandableSection)}\n      >\n          <div className=\"col\"><KImage src={`/images/farms/${farmImage}.png`} alt={lpSymbol} width={64} height={64} /></div>\n          <div className=\"col\">\n            <Flex justifyContent=\"flex-start\" alignItems=\"center\">\n              <Text className=\"token\">{lpSymbol}</Text>\n            </Flex>\n            <Text>Uses: {farmType}</Text>\n            <Text>TVL {totalValueFormated}</Text>\n          </div>\n          <div className=\"col\">\n            <Balance\n              fontSize=\"16px\"\n              value={rawTokenBalance}\n              decimals={rawTokenBalance ? 2 : 1}\n              unit=\"\"\n              color={rawTokenBalance ? \"warning\" : \"text\"}\n            />\n            <Text>Balance</Text>\n          </div>\n          <div className=\"col\">\n            <Balance\n              fontSize=\"16px\"\n              value={rawStakedBalance}\n              decimals={rawStakedBalance ? 2 : 1}\n              unit=\"\"\n              color={rawStakedBalance ? \"warning\" : \"text\"}\n            />\n            <Text>Deposited</Text>\n          </div>\n          <div className=\"col\">\n            <Balance\n              fontSize=\"16px\"\n              value={rawEarningsBalance}\n              decimals={rawEarningsBalance ? 2 : 1}\n              unit=\"\"\n              color={rawEarningsBalance ? \"warning\" : \"text\"}\n            />\n            <Text>Rewards</Text>\n          </div>\n          <div className=\"col\">\n            <Balance\n              fontSize=\"16px\"\n              value={totalAPY.toString() !== 'NaN' ? totalAPY : 0}\n              decimals={2}\n              unit=\"%\"\n              color=\"warning\"\n            />\n            <Text color=\"warning\">APY</Text>\n          </div>\n          <div className=\"col\">\n            <Balance\n              fontSize=\"16px\"\n              value={dailyAPR}\n              decimals={2}\n              unit=\"%\"\n            />\n            <Text>Daily</Text>\n          </div>\n        </KMain>\n        <ExpandingWrapper expanded={showExpandableSection}>\n          <Divider />\n          <KingdomDetail\n            farm={farm}\n            walletBalance={rawTokenBalance}\n            depositBalance={rawStakedBalance}\n            rewardBalance={rawEarningsBalance}\n            walletBalanceQuoteValue={walletBalanceQuoteValue}\n            depositBalanceQuoteValue={depositBalanceQuoteValue}\n            farmName={farmType}\n            oneTokenQuoteValue={oneTokenQuoteValue}\n            removed={removed}\n            aprApy={aprApy}\n            account={account}\n            cakePrice={cakePrice}\n            bnbDividends={bnbDividends}\n          />\n        </ExpandingWrapper>\n      </K>\n    </>\n  )\n}\n\nexport default Kingdom\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport styled from 'styled-components'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst StyledText = styled(Text)`\n  line-height: 1.5;\n\n`\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, prefix, fontSize = '16px', }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <StyledText fontSize={fontSize} >\n      {prefix}{countUp}\n    </StyledText>\n  )\n}\n\nexport default CardValue\n","// import { DEFAULT_TOKEN_DECIMAL,  } from 'config'\nimport { BIG_ZERO } from 'utils/bigNumber'\n// import { useSelector } from 'react-redux'\n// import { getPoolApr, getFarmApr } from 'utils/apr'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport BigNumber from 'bignumber.js'\nimport getKingdomAPRAPY from 'utils/getKingdomAPRAPY'\n\nconst useTotalStaked = (farms: any, cakePrice: BigNumber, bakePrice: BigNumber, beltPrice: BigNumber, cubDen: any) => {\n  let rawTotalCUB = BIG_ZERO\n  let rawTotalStakedUSD = BIG_ZERO\n  let rawTotalAPY = 0\n  let rawTotalDailyAPR = 0\n  let count = 0\n  farms.forEach((farm) => {\n    if (farm.isKingdom) {\n      const { userData, lpTotalInQuoteTokenPCS = 0, lpTokenBalancePCS = 0, quoteToken: { busdPrice: quoteTokenPriceUsd }, token: { busdPrice: tokenPrice }} = farm\n      const { stakedBalance, earnings } = userData\n\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      const aprApy = getKingdomAPRAPY(farm, cakePrice, bakePrice, beltPrice, cubDen)\n\n      if (stakedBalance > '1') {\n        let oneTokenQuoteValue = BIG_ZERO\n\n        if (!farm.isKingdomToken)\n          oneTokenQuoteValue = lpTotalInQuoteTokenPCS ? new BigNumber(lpTotalInQuoteTokenPCS).div(new BigNumber(lpTokenBalancePCS)).times(quoteTokenPriceUsd) : new BigNumber(0)\n        else oneTokenQuoteValue = farm.farmType !== 'Belt' ? tokenPrice : new BigNumber(farm.token.busdPrice)\n\n        const depositBalanceQuoteValue = stakedBalance ? new BigNumber(stakedBalance).times(oneTokenQuoteValue) : new BigNumber(0)\n\n        rawTotalStakedUSD = rawTotalStakedUSD.plus(new BigNumber(depositBalanceQuoteValue))\n\n        rawTotalAPY = +rawTotalAPY + +aprApy.totalAPY\n        rawTotalDailyAPR = +rawTotalDailyAPR + +aprApy.dailyAPR\n\n        count += 1\n      }\n\n      if (earnings !== '0') rawTotalCUB = rawTotalCUB.plus(new BigNumber(earnings))\n    }\n  })\n\n  const stakedUSD = rawTotalStakedUSD !== BIG_ZERO ? getBalanceNumber(rawTotalStakedUSD) : 0\n\n  const cubEarned = rawTotalCUB !== BIG_ZERO ? getBalanceNumber(rawTotalCUB) : 0\n\n  const cubBusd = cubEarned ? new BigNumber(cubEarned).multipliedBy(cakePrice).toNumber() : 0\n\n  return [stakedUSD, cubEarned, cubBusd, rawTotalAPY, rawTotalDailyAPR, count]\n}\n\nexport default useTotalStaked\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport Balance from 'components/Balance'\nimport { Flex, Text } from '@pancakeswap-libs/uikit'\nimport useTotalStaked from '../hooks/useTotalStaked';\n\nconst Wrapper = styled.div`\n  max-width: 700px;\n  margin: 0 auto;\n`\n\ninterface TotalStakedProps {\n  farms: any\n  cakePrice: BigNumber\n  bakePrice?: BigNumber\n  beltPrice?: BigNumber\n  cubDen?: any\n}\n\nconst TotalStaked: React.FC<TotalStakedProps> = ({ farms, cakePrice, bakePrice, beltPrice, cubDen }) => {\n  const [totalStakeUSD, totalCub, totalCubUSD, totalAPY, totalDailyAPR, count] = useTotalStaked(farms, cakePrice, bakePrice, beltPrice, cubDen);\n\n  const avgAPY = totalAPY.toString() !== 'NaN' && totalAPY !== 0 ? totalAPY / count : 0\n  const avgDaily = totalDailyAPR ? totalDailyAPR / count : 0\n\n  const stakedUSDFormatted = totalStakeUSD ?  `$${totalStakeUSD.toLocaleString('en-US', { maximumFractionDigits: 2 })}`\n    : '0.00'\n  const dailyFormatted = avgDaily ?  `${avgDaily.toLocaleString('en-US', { maximumFractionDigits: 2 })}%`\n      : '0.00'\n  const cubUSDFormatted = totalCubUSD ?  `$${totalCubUSD.toLocaleString('en-US', { maximumFractionDigits: 2 })}`\n        : '0.00'\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\" alignItems=\"flex-start\">\n        <div>\n          <Text>Total Deposit</Text>\n          <Text fontSize=\"18px\" color=\"textSubtle\">{stakedUSDFormatted}</Text>\n          <Text>{count} assets</Text>\n        </div>\n        <div>\n          <Text>Average APY</Text>\n          <Balance\n            fontSize=\"18px\"\n            value={avgAPY}\n            decimals={avgAPY ? 2 : 1}\n            unit=\"%\"\n            color=\"textSubtle\"\n          />\n          <Text>Daily {dailyFormatted}</Text>\n        </div>\n        <div>\n          <Text>CUB Rewards</Text>\n          <Balance\n            fontSize=\"18px\"\n            value={totalCub}\n            decimals={totalCub ? 2 : 1}\n            unit=\"\"\n            color=\"textSubtle\"\n          />\n          <Text>{cubUSDFormatted}</Text>\n        </div>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default TotalStaked\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\ninterface FarmTabButtonsProps {\n  hasStakeInFinishedFarms: boolean\n  hasStakeInArchivedFarms: boolean\n}\n\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms, hasStakeInArchivedFarms }) => {\n  const { url } = useRouteMatch()\n  const location = useLocation()\n  const TranslateString = useI18n()\n\n  let activeIndex\n  switch (location.pathname) {\n    case '/kingdoms':\n      activeIndex = 0\n      break\n    case '/kingdoms/history':\n      activeIndex = 1\n      break\n    case '/kingdoms/archived':\n      activeIndex = 2\n      break\n    default:\n      activeIndex = 0\n      break\n  }\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {TranslateString(1198, 'Live')}\n        </ButtonMenuItem>\n        <NotificationDot show={hasStakeInFinishedFarms}>\n          <ButtonMenuItem as={Link} to={`${url}/history`}>\n            {TranslateString(388, 'Finished')}\n          </ButtonMenuItem>\n        </NotificationDot>\n        <NotificationDot show={hasStakeInArchivedFarms}>\n          <ButtonMenuItem as={Link} to={`${url}/archived`}>\n            {TranslateString(999, 'Discontinued')}\n          </ButtonMenuItem>\n        </NotificationDot>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 10px;\n  }\n`\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\nimport { useAppDispatch } from 'state'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Heading, Toggle, Text, Flex } from '@pancakeswap-libs/uikit'\nimport styled from 'styled-components'\n// import FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceCakeBusd, useTotalValueKingdoms, useBusdPriceFromLpSymbol, useFarmFromPid } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\n// import usePersistState from 'hooks/usePersistState'\nimport { Farm } from 'state/types'\n// import { getBalanceNumber } from 'utils/formatBalance'\nimport { getFarmApr } from 'utils/apr'\nimport { orderBy } from 'lodash'\n// import { getAddress } from 'utils/addressHelpers'\nimport isArchivedPid from 'utils/farmHelpers'\nimport PageHeader from 'components/PageHeader'\nimport { fetchFarmsPublicDataAsync, setLoadArchivedFarmsData } from 'state/farms'\nimport Select, { OptionProps } from 'components/Select/Select'\n// import { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport SearchInput from 'views/Farms/components/SearchInput'\n// import { ViewMode } from 'views/Farms/components/types'\nimport useBnbDividends from 'hooks/useBnbDividends'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport Kingdom from './components/Kingdom'\nimport CardValue from './components/CardValue'\nimport TotalStaked from './components/TotalStaked'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport './Kingdoms.css'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst FeeWrapper = styled.div`\n  max-width: 400px;\n`\n\nconst NUMBER_OF_FARMS_VISIBLE = 20\n\nconst Kingdoms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const totalValue = useTotalValueKingdoms();\n  const { pathname } = useLocation()\n  const { data: farmsLP } = useFarms()\n  const [query, setQuery] = useState('')\n  const { account } = useWeb3React()\n  const [sortOption, setSortOption] = useState('hot')\n  const cakePrice = usePriceCakeBusd()\n  const realCakePrice = useBusdPriceFromLpSymbol('CAKE') || new BigNumber(0)\n  const bakePrice = useBusdPriceFromLpSymbol('BAKE-BNB LP')\n  const beltPrice = useBusdPriceFromLpSymbol('BELT-BNB LP')\n  const cubDen = useFarmFromPid(12)\n\n  const bnbDividends = useBnbDividends() || {}\n\n  const dispatch = useAppDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const isArchived = pathname.includes('archived')\n  const isInactive = pathname.includes('history')\n  const isActive = !isInactive && !isArchived\n\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  // const userDataReady = !account || (!!account && userDataLoaded)\n\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\n  useEffect(() => {\n    setStakedOnly(!isActive)\n  }, [isActive])\n\n  useEffect(() => {\n    // Makes the main scheduled fetching to request archived farms data\n    dispatch(setLoadArchivedFarmsData(isArchived))\n\n    // Immediately request data for archived farms so users don't have to wait\n    // 60 seconds for public data and 10 seconds for user data\n    if (isArchived) {\n      dispatch(fetchFarmsPublicDataAsync())\n      if (account) {\n        dispatch(fetchFarmUserDataAsync(account))\n      }\n    }\n  }, [isArchived, dispatch, account])\n\n  const activeFarms = farmsLP.filter(farm => {\n    return farm.isKingdom && !['0X', '0.0X'].includes(farm.multiplier) && !isArchivedPid(farm.pid)\n  })\n\n  const inactiveFarms = farmsLP.filter(farm => {\n    return farm.isKingdom && ['0X', '0.0X'].includes(farm.multiplier) && !isArchivedPid(farm.pid)\n  })\n\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedFarms = archivedFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const farmsList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken) {\n          return farm\n        }\n\n        const quoteTokenPriceUsd = farm.quoteToken.busdPrice\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\n        const apr = isActive ? getFarmApr(farm.poolWeight, cakePrice, totalLiquidity) : 0\n\n        return { ...farm, apr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = query.toLowerCase()\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return farm.lpSymbol.toLowerCase().includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, query, isActive],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n\n  const farmsStakedMemoized = useMemo(() => {\n    let farmsStaked = []\n\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n      switch (sortOption) {\n        case 'apr':\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr, 'desc')\n        case 'multiplier':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n            'desc',\n          )\n        case 'earned':\n          return orderBy(farms, (farm: FarmWithStakedValue) => (farm.userData ? farm.userData.earnings : 0), 'desc')\n        case 'liquidity':\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n        default:\n          return farms\n      }\n    }\n\n    if (isActive) {\n      farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n    }\n    if (isInactive) {\n      farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n    }\n    if (isArchived) {\n      farmsStaked = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\n    }\n\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible)\n  }, [\n    sortOption,\n    activeFarms,\n    farmsList,\n    isActive,\n    stakedOnly,\n    stakedOnlyFarms,\n    numberOfFarmsVisible,\n    isInactive,\n    stakedInactiveFarms,\n    inactiveFarms,\n    isArchived,\n    stakedArchivedFarms,\n    archivedFarms,\n  ])\n\n  useEffect(() => {\n    const showMoreFarms = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\n      }\n    }\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [farmsStakedMemoized, observerIsSet])\n\n  const renderContent = (): JSX.Element => {\n    return (\n      <div>\n          <Route exact path={`${path}`}>\n            {farmsStakedMemoized.map((farm) => (\n              <Kingdom key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} bakePrice={bakePrice} beltPrice={beltPrice} cubDen={cubDen} realCakePrice={realCakePrice} bnbDividends={bnbDividends} />\n            ))}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsStakedMemoized.map((farm) => (\n              <Kingdom key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed bakePrice={bakePrice} beltPrice={beltPrice} cubDen={cubDen} realCakePrice={realCakePrice} bnbDividends={bnbDividends} />\n            ))}\n          </Route>\n          <Route exact path={`${path}/archived`}>\n            {farmsStakedMemoized.map((farm) => (\n              <Kingdom key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed bakePrice={bakePrice} beltPrice={beltPrice} cubDen={cubDen} realCakePrice={realCakePrice} bnbDividends={bnbDividends} />\n            ))}\n          </Route>\n      </div>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  return (\n    <>\n      <PageHeader>\n        <div className='k-header'>\n          <Heading as=\"h1\" size=\"xxl\" color=\"secondary\" mb=\"10px\">\n            Kingdoms\n          </Heading>\n          <Flex>\n            <Text bold fontSize=\"24px\">\n              TVL&nbsp;\n            </Text>\n            <CardValue fontSize=\"24px\" value={totalValue.toNumber()} prefix=\"$\" decimals={2}/>\n          </Flex>\n        </div>\n        <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"10px\" style={{ textAlign: 'left' }}>\n          Composable Auto-Compounding\n        </Heading>\n        <Heading as=\"h2\" color=\"secondary\" mb=\"10px\" style={{ textAlign: 'left' }}>\n          Stake tokens for cross-platform farming plus CUB rewards\n        </Heading>\n        <Heading as=\"h2\" color=\"warning\" mb=\"10px\" style={{ textAlign: 'left' }}>\n          IMPORTANT: Must use the host farm exchange (eg. PCS, Bakery) for Kingdom LP tokens\n        </Heading>\n        <Heading as=\"h2\" color=\"warning\" mb=\"10px\" style={{ textAlign: 'left' }}>\n          CertiK Audit is Pending: Our other contracts have been audited by CertiK and Kingdoms are currently under review. Please use at your own discretion until the audit has been published\n        </Heading>\n        <FeeWrapper>\n          <Heading as=\"h2\" color=\"secondary\" mb=\"5px\" style={{ textAlign: 'left' }}>\n            Fees\n          </Heading>\n          <Flex justifyContent=\"space-between\">\n            <Text>Fee for CUB Staking Kingdom BNB Dividends:</Text>\n            <Text>3%</Text>\n          </Flex>\n          <Flex justifyContent=\"space-between\">\n            <Text>Management Fee:</Text>\n            <Text>7%</Text>\n          </Flex>\n          <Flex justifyContent=\"space-between\">\n            <Text>CUB Burn Rate:</Text>\n            <Text>100% of Fees Buyback and Burn CUB</Text>\n          </Flex>\n          <Flex justifyContent=\"space-between\">\n            <Text>Withdrawal Fee:</Text>\n            <Text>None</Text>\n          </Flex>\n        </FeeWrapper>\n      </PageHeader>\n      <Page className=\"k-container\">\n        <TotalStaked farms={farmsStakedMemoized} cakePrice={cakePrice} bakePrice={bakePrice} beltPrice={beltPrice} cubDen={cubDen} />\n        <ControlContainer>\n          <ViewControls>\n            <ToggleWrapper>\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\n              <Text>Staked only</Text>\n            </ToggleWrapper>\n            <FarmTabButtons\n              hasStakeInFinishedFarms={stakedInactiveFarms.length > 0}\n              hasStakeInArchivedFarms={stakedArchivedFarms.length > 0}\n            />\n          </ViewControls>\n          <FilterContainer>\n            <LabelWrapper>\n              <Text>SORT BY</Text>\n              <Select\n                options={[\n                  {\n                    label: 'Default',\n                    value: 'default',\n                  },\n                  {\n                    label: 'APR',\n                    value: 'apr',\n                  },\n                  {\n                    label: 'Multiplier',\n                    value: 'multiplier',\n                  },\n                  {\n                    label: 'Earned',\n                    value: 'earned',\n                  },\n                  {\n                    label: 'Liquidity',\n                    value: 'liquidity',\n                  },\n                ]}\n                onChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text>SEARCH</Text>\n              <SearchInput onChange={handleChangeQuery} />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer>\n        <div id=\"kingdoms\">\n          {/* farmsStakedMemoized.map((farm) => (\n            <Kingdom key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} bakePrice={bakePrice} beltPrice={beltPrice} cubDen={cubDen} realCakePrice={realCakePrice} bnbDividends={bnbDividends} />\n          )) */}\n          {renderContent()}\n        </div>\n        <div ref={loadMoreRef} />\n      </Page>\n    </>\n  )\n}\n\nexport default Kingdoms\n","import { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport axios from 'axios'\nimport useRefresh from './useRefresh'\n\nconst useBnbDividends = () => {\n  const [bnbDividends, setBnbDividends] = useState<any>()\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBnbDividends = async () => {\n      const res = await axios.get(`https://bnb.fbslo.net/?address=${account}`, { timeout: 7000 }).then(result => result.data).catch(() => {\n        return { error: true }\n      })\n\n      setBnbDividends(res)\n    }\n\n    if (account) {\n      fetchBnbDividends()\n    }\n  }, [account, fastRefresh])\n\n  return bnbDividends\n}\n\nexport default useBnbDividends\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { claim } from 'utils/callHelpers'\nimport { useBnbDvividendsContract } from './useContract'\n\nexport const useClaim = (bnbDividends: any) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const bnbDividendsContract = useBnbDvividendsContract()\n  const { user = '', amount = '', nonce = '', signature = '' } = bnbDividends\n\n  const handleClaim = useCallback(async () => {\n    const txHash = await claim(bnbDividendsContract, account, user, amount, nonce, signature)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [dispatch, account, user, amount, nonce, signature, bnbDividendsContract])\n\n  return { onClaim: handleClaim }\n}\n\nexport default useClaim\n"],"sourceRoot":""}